command,script
listFiles,"Get-ChildItem"
listFilesRecursively,"Get-ChildItem -Recurse"
findProcess,"Get-Process"
stopProcess,"Stop-Process -Name 'processName'"
getService,"Get-Service"
startService,"Start-Service -Name 'serviceName'"
stopService,"Stop-Service -Name 'serviceName'"
restartService,"Restart-Service -Name 'serviceName'"
listDrives,"Get-PSDrive"
getEventLogs,"Get-EventLog -LogName 'System'"
getUptime,"(Get-CimInstance Win32_OperatingSystem).LastBootUpTime"
checkPort,"Test-NetConnection -ComputerName 'localhost' -Port 80"
downloadFile,"Invoke-WebRequest -Uri 'http://example.com/file.txt' -OutFile 'C:\\file.txt'"
getDiskUsage,"Get-WmiObject Win32_LogicalDisk"
getMemoryUsage,"Get-WmiObject Win32_OperatingSystem | Select-Object TotalVisibleMemorySize,FreePhysicalMemory"
getCpuUsage,"Get-WmiObject Win32_Processor | Measure-Object -Property LoadPercentage -Average"
pingServer,"Test-Connection -ComputerName 'google.com'"
getEnvVariables,"Get-ChildItem Env:"
setEnvVariable,"[System.Environment]::SetEnvironmentVariable('variableName','value')"
clearEnvVariable,"[System.Environment]::SetEnvironmentVariable('variableName',$null)"
checkNetwork,"Get-NetIPAddress"
getHotfixes,"Get-HotFix"
listInstalledSoftware,"Get-WmiObject -Class Win32_Product"
getLastBootTime,"(Get-CimInstance Win32_OperatingSystem).LastBootUpTime"
restartComputer,"Restart-Computer"
shutdownComputer,"Stop-Computer"
createNewFile,"New-Item -Path 'C:\\path\\file.txt' -ItemType File"
createNewFolder,"New-Item -Path 'C:\\path\\folder' -ItemType Directory"
deleteFile,"Remove-Item -Path 'C:\\path\\file.txt'"
deleteFolder,"Remove-Item -Path 'C:\\path\\folder' -Recurse"
copyFile,"Copy-Item -Path 'C:\\source\\file.txt' -Destination 'C:\\destination'"
moveFile,"Move-Item -Path 'C:\\source\\file.txt' -Destination 'C:\\destination'"
renameFile,"Rename-Item -Path 'C:\\path\\oldname.txt' -NewName 'newname.txt'"
setExecutionPolicy,"Set-ExecutionPolicy RemoteSigned"
getExecutionPolicy,"Get-ExecutionPolicy"
listScheduledTasks,"Get-ScheduledTask"
createScheduledTask,"New-ScheduledTaskTrigger -At 3am -Daily | Register-ScheduledTask -Action 'C:\\path\\script.ps1' -TaskName 'MyTask'"
runScheduledTask,"Start-ScheduledTask -TaskName 'MyTask'"
getUserSessions,"Get-Process -IncludeUserName | Select-Object UserName,ProcessName,ID"
findTextInFiles,"Select-String -Path 'C:\\path\\*.*' -Pattern 'textToFind'"
enableFirewall,"Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True"
disableFirewall,"Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False"
listFirewallRules,"Get-NetFirewallRule"
addFirewallRule,"New-NetFirewallRule -DisplayName 'Allow HTTP' -Direction Inbound -LocalPort 80 -Protocol TCP -Action Allow"
removeFirewallRule,"Remove-NetFirewallRule -DisplayName 'Allow HTTP'"
checkPowerPlan,"Get-WmiObject -Class Win32_PowerPlan | Where-Object { $_.IsActive -eq 'True' }"
setPowerPlan,"powercfg /setactive scheme_max"
getIpAddress,"(Get-NetIPAddress -AddressFamily IPv4).IPAddress"
setIpAddress,"New-NetIPAddress -InterfaceAlias 'Ethernet' -IPAddress '192.168.1.100' -PrefixLength 24 -DefaultGateway '192.168.1.1'"
flushDns,"Clear-DnsClientCache"
getDnsCache,"Get-DnsClientCache"
addDnsEntry,"Add-DnsClientNrptRule -Namespace 'example.com' -NameServers '192.168.1.1'"
removeDnsEntry,"Remove-DnsClientNrptRule -Namespace 'example.com'"
backupRegistry,"reg export HKLM\\Software\\MyApp C:\\backup\\myapp.reg"
restoreRegistry,"reg import C:\\backup\\myapp.reg"
enableRemoteDesktop,"Set-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server' -Name 'fDenyTSConnections' -Value 0"
disableRemoteDesktop,"Set-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server' -Name 'fDenyTSConnections' -Value 1"
getScheduledTaskInfo,"Get-ScheduledTaskInfo -TaskName 'MyTask'"
removeScheduledTask,"Unregister-ScheduledTask -TaskName 'MyTask' -Confirm:$false"
getBiosInfo,"Get-WmiObject -Class Win32_BIOS"
getSystemInfo,"Get-WmiObject -Class Win32_ComputerSystem"
getNetworkAdapter,"Get-NetAdapter"
enableNetworkAdapter,"Enable-NetAdapter -Name 'Ethernet'"
disableNetworkAdapter,"Disable-NetAdapter -Name 'Ethernet'"
resetNetworkAdapter,"Reset-NetAdapter -Name 'Ethernet'"
listShares,"Get-SmbShare"
createShare,"New-SmbShare -Name 'MyShare' -Path 'C:\\SharedFolder' -FullAccess 'Everyone'"
removeShare,"Remove-SmbShare -Name 'MyShare'"
getUserProfiles,"Get-WmiObject -Class Win32_UserProfile"
deleteUserProfile,"Remove-Item -Path 'C:\\Users\\username' -Recurse"
getGroupMembers,"Get-LocalGroupMember -Group 'Administrators'"
addUserToGroup,"Add-LocalGroupMember -Group 'Administrators' -Member 'username'"
removeUserFromGroup,"Remove-LocalGroupMember -Group 'Administrators' -Member 'username'"
createNewUser,"New-LocalUser -Name 'newuser' -Password (ConvertTo-SecureString 'password' -AsPlainText -Force)"
deleteUser,"Remove-LocalUser -Name 'newuser'"
lockWorkstation,"rundll32.exe user32.dll, LockWorkStation"
logoffUser,"shutdown.exe /l"
getPrinterList,"Get-Printer"
addPrinter,"Add-Printer -Name 'MyPrinter' -DriverName 'DriverName' -PortName 'PortName'"
removePrinter,"Remove-Printer -Name 'MyPrinter'"
getClipboardText,"Get-Clipboard"
setClipboardText,"Set-Clipboard -Value 'TextToCopy'"
getSystemDateTime,"Get-Date"
setSystemDateTime,"Set-Date -Date '2024-12-31 10:00'"
listNetworkProfiles,"Get-NetConnectionProfile"
setNetworkProfile,"Set-NetConnectionProfile -InterfaceAlias 'Ethernet' -NetworkCategory Private"
getCpuInfo,"Get-CimInstance -ClassName Win32_Processor"
getGpuInfo,"Get-CimInstance -ClassName Win32_VideoController"
checkPendingReboot,"Get-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Auto Update\\RebootRequired'"
getUpdates,"Get-WindowsUpdateLog"
installWindowsFeature,"Install-WindowsFeature -Name Web-Server"
removeWindowsFeature,"Uninstall-WindowsFeature -Name Web-Server"
getScheduledJobs,"Get-ScheduledJob"
registerScheduledJob,"Register-ScheduledJob -Name 'MyJob' -ScriptBlock { Get-Process }"
unregisterScheduledJob,"Unregister-ScheduledJob -Name 'MyJob'"
exportScheduledJobs,"Export-ScheduledJob -Name 'MyJob' -OutputFile 'C:\\jobs.xml'"
importScheduledJobs,"Import-ScheduledJob -Path 'C:\\jobs.xml'"
getRemoteDesktopUsers,"qwinsta /server:localhost"
logoffRemoteDesktopUser,"logoff /server:localhost 1"
listEventLogs,"Get-EventLog -LogName * | Select-Object -Unique Log"
exportEventLog,"Export-EventLog -LogName System -Path 'C:\\logs\\system.evtx'"
importCsv,"Import-Csv -Path 'C:\\path\\file.csv'"
exportCsv,"Get-Process | Export-Csv -Path 'C:\\path\\processes.csv'"
importXml,"[xml](Get-Content 'C:\\path\\file.xml')"
exportXml,"$xmlData.Save('C:\\path\\file.xml')"
getRegistryKey,"Get-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run'"
setRegistryKey,"Set-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' -Name 'MyApp' -Value 'C:\\MyApp\\MyApp.exe'"
removeRegistryKey,"Remove-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' -Name 'MyApp'"
getFileHash,"Get-FileHash -Path 'C:\\path\\file.txt'"
compressFile,"Compress-Archive -Path 'C:\\path\\file.txt' -DestinationPath 'C:\\path\\file.zip'"
decompressFile,"Expand-Archive -Path 'C:\\path\\file.zip' -DestinationPath 'C:\\path\\'"
listEnvironmentVariables,"[System.Environment]::GetEnvironmentVariables()"
createNewVariable,"New-Variable -Name 'MyVariable' -Value 'HelloWorld'"
removeVariable,"Remove-Variable -Name 'MyVariable'"
startProcess,"Start-Process 'notepad.exe'"
stopServiceByName,"Stop-Service -DisplayName 'MyService'"
getSystemLocale,"Get-WinSystemLocale"
setSystemLocale,"Set-WinSystemLocale -SystemLocale 'en-US'"
getTimezone,"Get-TimeZone"
setTimezone,"Set-TimeZone -Name 'Pacific Standard Time'"
getUserSID,"Get-WmiObject -Class Win32_UserAccount | Where-Object { $_.Name -eq 'username' } | Select-Object SID"
convertToJson,"ConvertTo-Json -InputObject @{'Key'='Value'}"
convertFromJson,"ConvertFrom-Json -InputObject '{\"Key\":\"Value\"}'"
getHostname,"$env:COMPUTERNAME"
getUsername,"$env:USERNAME"
getSystemArchitecture,"(Get-WmiObject -Class Win32_OperatingSystem).OSArchitecture"
getOsVersion,"(Get-WmiObject -Class Win32_OperatingSystem).Version"
getEventLogEntries,"Get-EventLog -LogName Application -Newest 10"
clearEventLog,"Clear-EventLog -LogName Application"
getStartupPrograms,"Get-CimInstance -ClassName Win32_StartupCommand"
enableStartupProgram,"Enable-ScheduledTask -TaskName 'ProgramName'"
disableStartupProgram,"Disable-ScheduledTask -TaskName 'ProgramName'"
sendEmail,"Send-MailMessage -From 'user@example.com' -To 'recipient@example.com' -Subject 'Test Email' -Body 'This is a test.' -SmtpServer 'smtp.example.com'"
getErrorLog,"Get-EventLog -LogName Application -EntryType Error"
getWarningLog,"Get-EventLog -LogName Application -EntryType Warning"
getInfoLog,"Get-EventLog -LogName Application -EntryType Information"
testConnection,"Test-NetConnection -ComputerName 'example.com'"
setNetworkAdapterProperty,"Set-NetAdapterAdvancedProperty -Name 'Ethernet' -DisplayName 'Jumbo Packet' -DisplayValue '9014 Bytes'"
resetNetworkStack,"netsh int ip reset"
releaseDhcpLease,"ipconfig /release"
renewDhcpLease,"ipconfig /renew"
displayNetworkConnections,"netstat -ano"
viewRoutingTable,"route print"
enableProxy,"netsh winhttp set proxy proxy-server='http=myproxy:80;https=myproxy:443'"
disableProxy,"netsh winhttp reset proxy"
getVolumeShadowCopy,"vssadmin list shadows"
createVolumeShadowCopy,"vssadmin create shadow /For=C:"
deleteVolumeShadowCopy,"vssadmin delete shadows /For=C:"
getPowershellVersion,"$PSVersionTable.PSVersion"
updateHelp,"Update-Help -Module * -Force"
getFilePermissions,"Get-Acl -Path 'C:\\path\\file.txt'"
setFilePermissions,"Set-Acl -Path 'C:\\path\\file.txt' -AclObject $acl"
getRemoteSessions,"query user"
startRemoteSession,"Enter-PSSession -ComputerName 'RemotePC'"
stopRemoteSession,"Exit-PSSession"
invokeRemoteCommand,"Invoke-Command -ComputerName 'RemotePC' -ScriptBlock { Get-Process }"
setTimeZoneDynamic,"Set-TimeZone -Name (tzutil /g)"
getEventLogSources,"Get-EventLog -LogName Application | Select-Object Source -Unique"
addScheduledTaskTrigger,"New-ScheduledTaskTrigger -AtStartup"
getProcessOwner,"Get-WmiObject Win32_Process | ForEach-Object { $_.GetOwner().User }"
restartNetworkInterface,"Disable-NetAdapter -Name 'Ethernet'; Enable-NetAdapter -Name 'Ethernet'"
getConnectedUsbDevices,"Get-WmiObject -Query 'Select * From Win32_USBControllerDevice'"
mountIso,"Mount-DiskImage -ImagePath 'C:\\path\\image.iso'"
unmountIso,"Dismount-DiskImage -ImagePath 'C:\\path\\image.iso'"
selectObject,"Get-Process | Select-Object Name,Id,CPU"
whereObject,"Get-Process | Where-Object { $_.CPU -gt 100 }"
sortObject,"Get-Process | Sort-Object CPU -Descending"
groupObject,"Get-Process | Group-Object -Property ProcessName"
measureObject,"Get-ChildItem | Measure-Object -Property Length -Sum"
foreachObject,"Get-Process | ForEach-Object { $_.Name }"
formatTable,"Get-Process | Format-Table -Property Name,Id,CPU"
formatList,"Get-Process | Format-List -Property Name,Id,CPU"
outString,"Get-Process | Out-String"
convertToCsv,"Get-Process | Select-Object Name,Id,CPU | ConvertTo-Csv"
convertFromCsv,"Import-Csv -Path 'C:\\path\\file.csv' | ConvertFrom-Csv"
convertToHtml,"Get-Process | ConvertTo-Html -Property Name,Id,CPU"
convertFromHtml,"(Get-Content 'C:\\path\\file.html') -join '' | ConvertFrom-Html"
convertToXml,"Get-Process | ConvertTo-Xml"
convertFromXml,"[xml](Get-Content 'C:\\path\\file.xml')"
convertToJson,"Get-Process | ConvertTo-Json"
convertFromJson,"Get-Content 'C:\\path\\file.json' | ConvertFrom-Json"
selectString,"Select-String -Path 'C:\\path\\file.txt' -Pattern 'error'"
addMember,"$obj = New-Object PSObject; $obj | Add-Member -MemberType NoteProperty -Name 'Name' -Value 'John Doe'"
addContent,"Add-Content -Path 'C:\\path\\file.txt' -Value 'New content'"
setContent,"Set-Content -Path 'C:\\path\\file.txt' -Value 'Overwrite content'"
joinPath,"Join-Path -Path 'C:\\path' -ChildPath 'file.txt'"
splitPath,"Split-Path -Path 'C:\\path\\file.txt' -Leaf"
testPath,"Test-Path -Path 'C:\\path\\file.txt'"
compareObject,"Compare-Object -ReferenceObject (Get-Content 'C:\\path\\file1.txt') -DifferenceObject (Get-Content 'C:\\path\\file2.txt')"
mergeCsv,"Import-Csv 'C:\\path\\file1.csv' | Select-Object * | Export-Csv 'C:\\path\\merged.csv' -NoTypeInformation"
removeDuplicateLines,"Get-Content 'C:\\path\\file.txt' | Sort-Object | Get-Unique | Set-Content 'C:\\path\\unique.txt'"
countLines,"(Get-Content 'C:\\path\\file.txt').Count"
filterCsv,"Import-Csv 'C:\\path\\file.csv' | Where-Object { $_.ColumnName -eq 'Value' }"
createHashtable,"$hashTable = @{}; $hashTable['Key'] = 'Value'"
iterateHashtable,"$hashTable.GetEnumerator() | ForEach-Object { Write-Host $_.Key $_.Value }"
updateHashtable,"$hashTable['Key'] = 'NewValue'"
deleteHashtableKey,"$hashTable.Remove('Key')"
exportJson,"Get-Process | ConvertTo-Json | Set-Content -Path 'C:\\path\\file.json'"
filterJson,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $json | Where-Object { $_.Property -eq 'Value' }"
joinCsvColumns,"Import-Csv 'C:\\path\\file.csv' | Select-Object *,@{Name='FullName';Expression={$_.'FirstName' + ' ' + $_.'LastName'}}"
transposeCsv,"Import-Csv 'C:\\path\\file.csv' | ConvertTo-Json | ConvertFrom-Json | ForEach-Object { $_.PSObject.Properties | ForEach-Object { $_.Name } }"
extractSubstring,"'HelloWorld'.Substring(0,5)"
splitString,"'one,two,three' -split ','"
joinStrings,"$array = @('one','two','three'); $array -join ','"
replaceString,"(Get-Content 'C:\\path\\file.txt') -replace 'oldText', 'newText' | Set-Content 'C:\\path\\file.txt'"
addCsvColumn,"Import-Csv 'C:\\path\\file.csv' | ForEach-Object { $_ | Add-Member -NotePropertyName 'NewColumn' -NotePropertyValue 'NewValue'; $_ } | Export-Csv 'C:\\path\\file.csv' -NoTypeInformation"
removeCsvColumn,"Import-Csv 'C:\\path\\file.csv' | Select-Object -ExcludeProperty 'ColumnToRemove' | Export-Csv 'C:\\path\\file.csv' -NoTypeInformation"
trimWhitespace,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_.Trim() } | Set-Content 'C:\\path\\file.txt'"
convertToUpperCase,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_.ToUpper() } | Set-Content 'C:\\path\\file.txt'"
convertToLowerCase,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_.ToLower() } | Set-Content 'C:\\path\\file.txt'"
getSubstring,"'Hello World'.Substring(0,5)"
splitCsvIntoFiles,"$csv = Import-Csv 'C:\\path\\file.csv'; $i=0; $csv | Group-Object ColumnName | ForEach-Object { $_.Group | Export-Csv ('C:\\path\\split'+$i+'.csv') -NoTypeInformation; $i++ }"
getCsvColumnNames,"(Import-Csv 'C:\\path\\file.csv')[0].PSObject.Properties.Name"
replaceCsvColumnValues,"Import-Csv 'C:\\path\\file.csv' | ForEach-Object { $_.ColumnName = $_.ColumnName -replace 'OldValue','NewValue'; $_ } | Export-Csv 'C:\\path\\file.csv' -NoTypeInformation"
transposeDataTable,"$data = Import-Csv 'C:\\path\\file.csv'; $cols = $data | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name; $rows = @(); $cols | ForEach-Object { $row = '' | Select-Object -Property 'ColumnName', 'Values'; $row.ColumnName = $_; $row.Values = $data | ForEach-Object { $_.$_ }; $rows += $row }; $rows | Export-Csv 'C:\\path\\transposed.csv' -NoTypeInformation"
pivotDataTable,"$data = Import-Csv 'C:\\path\\file.csv'; $pivot = $data | Group-Object ColumnToGroup -AsHashTable; $pivot.GetEnumerator() | ForEach-Object { [PSCustomObject]@{'Group' = $_.Key; 'Values' = ($_.Value | Measure-Object -Property ColumnToAggregate -Sum).Sum} } | Export-Csv 'C:\\path\\pivot.csv' -NoTypeInformation"
removeEmptyLines,"Get-Content 'C:\\path\\file.txt' | Where-Object { $_ -ne '' } | Set-Content 'C:\\path\\file.txt'"
reverseLines,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ } | Sort-Object { [int]$_ } -Descending | Set-Content 'C:\\path\\file.txt'"
expandProperty,"Get-Process | Select-Object -ExpandProperty Name"
combineCsvFiles,"$files = Get-ChildItem 'C:\\path\\' -Filter '*.csv'; $combined = foreach ($file in $files) { Import-Csv $file }; $combined | Export-Csv 'C:\\path\\combined.csv' -NoTypeInformation"
convertToMarkdown,"Get-Process | Select-Object Name,Id,CPU | ConvertTo-MarkdownTable"
calculateExpression,"[math]::Pow(2, 3)"
filterByDate,"Get-ChildItem -Path 'C:\\path\\' | Where-Object { $_.LastWriteTime -ge (Get-Date).AddDays(-7) }"
findLongestLine,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_.Length } | Measure-Object -Maximum"
findShortestLine,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_.Length } | Measure-Object -Minimum"
getRandomLine,"Get-Content 'C:\\path\\file.txt' | Get-Random"
convertToTitleCase,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_.Substring(0,1).ToUpper() + $_.Substring(1).ToLower() } | Set-Content 'C:\\path\\file.txt'"
generateRange,"1..10 | ForEach-Object { $_ }"
mergeJsonObjects,"$json1 = Get-Content 'C:\\path\\file1.json' | ConvertFrom-Json; $json2 = Get-Content 'C:\\path\\file2.json' | ConvertFrom-Json; [PSCustomObject]@{ Prop1 = $json1.Prop1; Prop2 = $json2.Prop2 } | ConvertTo-Json"
sortJsonArray,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $sorted = $json | Sort-Object PropertyName; $sorted | ConvertTo-Json | Set-Content 'C:\\path\\sorted.json'"
calculateCsvColumn,"Import-Csv 'C:\\path\\file.csv' | ForEach-Object { $_ | Add-Member -MemberType NoteProperty -Name 'Total' -Value ([int]$_.Column1 + [int]$_.Column2) -Force; $_ } | Export-Csv 'C:\\path\\file.csv' -NoTypeInformation"
splitTextByDelimiter,"'one,two,three' -split ','"
concatenateFiles,"Get-Content 'C:\\path\\file1.txt','C:\\path\\file2.txt' | Set-Content 'C:\\path\\combined.txt'"
compareStrings,"if ('string1' -eq 'string2') { 'Strings are equal' } else { 'Strings are not equal' }"
roundNumbers,"[math]::Round(3.14159, 2)"
transposeJsonArray,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $keys = $json[0].PSObject.Properties.Name; $keys | ForEach-Object { $key = $_; [PSCustomObject]@{ Key = $key; Values = $json | ForEach-Object { $_.$key } } } | ConvertTo-Json | Set-Content 'C:\\path\\transposed.json'"
convertCsvToXlsx,"$excel = New-Object -ComObject Excel.Application; $workbook = $excel.Workbooks.Open('C:\\path\\file.csv'); $workbook.SaveAs('C:\\path\\file.xlsx',51); $excel.Quit()"
filterDataTable,"$data = Import-Csv 'C:\\path\\file.csv'; $filtered = $data | Where-Object { $_.ColumnName -eq 'Value' }; $filtered | Export-Csv 'C:\\path\\filtered.csv' -NoTypeInformation"
convertJsonToCsv,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $json | ConvertTo-Csv | Set-Content 'C:\\path\\file.csv'"
filterJsonArray,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $filtered = $json | Where-Object { $_.Property -eq 'Value' }; $filtered | ConvertTo-Json | Set-Content 'C:\\path\\filtered.json'"
sortCsvRows,"Import-Csv 'C:\\path\\file.csv' | Sort-Object ColumnName | Export-Csv 'C:\\path\\sorted.csv' -NoTypeInformation"
removeSpecialCharacters,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ -replace '[^a-zA-Z0-9]', '' } | Set-Content 'C:\\path\\clean.txt'"
generateRandomNumbers,"1..10 | ForEach-Object { Get-Random -Minimum 1 -Maximum 100 }"
createCsvFromObjects,"$data = @(); $data += [PSCustomObject]@{Column1='Value1';Column2='Value2'}; $data | Export-Csv 'C:\\path\\file.csv' -NoTypeInformation"
calculateAverage,"Import-Csv 'C:\\path\\file.csv' | Measure-Object -Property 'ColumnName' -Average"
findMaxValue,"Import-Csv 'C:\\path\\file.csv' | Measure-Object -Property 'ColumnName' -Maximum"
findMinValue,"Import-Csv 'C:\\path\\file.csv' | Measure-Object -Property 'ColumnName' -Minimum"
calculateSum,"Import-Csv 'C:\\path\\file.csv' | Measure-Object -Property 'ColumnName' -Sum"
flattenArray,"$array = @(1, @(2, 3), @(4, @(5, 6))); $flattened = $array -replace '[@()]', ''"
removeArrayDuplicates,"$array = @(1, 2, 2, 3, 4, 4, 5); $uniqueArray = $array | Sort-Object -Unique"
findArrayIntersection,"Compare-Object -ReferenceObject @(1, 2, 3) -DifferenceObject @(2, 3, 4) -IncludeEqual | Where-Object { $_.SideIndicator -eq '==' } | ForEach-Object { $_.InputObject }"
calculateStandardDeviation,"$values = 1..10; $average = ($values | Measure-Object -Average).Average; $squaredDifferences = $values | ForEach-Object { [math]::Pow($_ - $average, 2) }; [math]::Sqrt(($squaredDifferences | Measure-Object -Sum).Sum / $squaredDifferences.Length)"
transposeCsvColumns,"Import-Csv 'C:\\path\\file.csv' | Select-Object Column1,Column2 | Export-Csv 'C:\\path\\transposed.csv' -NoTypeInformation"
splitStringIntoChunks,"$string = 'abcdefghij'; $chunkSize = 2; -join ($string -split '(.{' + $chunkSize + '})' -ne '')"
extractEmails,"Get-Content 'C:\\path\\file.txt' | Select-String -Pattern '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b' -AllMatches | ForEach-Object { $_.Matches.Value }"
extractUrls,"Get-Content 'C:\\path\\file.txt' | Select-String -Pattern '(https?|ftp)://[^\s/$.?#].[^\s]*' -AllMatches | ForEach-Object { $_.Matches.Value }"
convertToBase64,"[Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes('Hello World'))"
convertFromBase64,"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SGVsbG8gV29ybGQ='))"
hashString,"'Hello World' | ForEach-Object { [BitConverter]::ToString([System.Security.Cryptography.HashAlgorithm]::Create('SHA256').ComputeHash([System.Text.Encoding]::UTF8.GetBytes($_))) -replace '-', '' }"
splitArrayIntoBatches,"$array = 1..10; $batchSize = 3; $array | ForEach-Object -Begin { $i = 0 } -Process { $group = [math]::Floor($i++ / $batchSize); if (-not $groups[$group]) { $groups[$group] = @() }; $groups[$group] += $_ } -End { $groups }"
replaceCsvDelimiter,"(Get-Content 'C:\\path\\file.csv') -replace ',', ';' | Set-Content 'C:\\path\\file.csv'"
normalizeWhitespace,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ -replace '\s+', ' ' } | Set-Content 'C:\\path\\file.txt'"
splitCsvRowsByValue,"Import-Csv 'C:\\path\\file.csv' | Group-Object -Property 'ColumnName' | ForEach-Object { $_.Group | Export-Csv ('C:\\path\\file_'+$_.Name+'.csv') -NoTypeInformation }"
generateDataMatrix,"1..10 | ForEach-Object { $row = 1..10 | ForEach-Object { Get-Random -Minimum 0 -Maximum 100 }; $row -join ',' } | Out-File 'C:\\path\\matrix.csv'"
parseIniFile,"Get-Content 'C:\\path\\file.ini' | ForEach-Object { if ($_ -match '^\[(.+)\]$') { $section = $matches[1] } elseif ($_ -match '(.+)=(.+)') { New-Object PSObject -Property @{ Section = $section; Key = $matches[1].Trim(); Value = $matches[2].Trim() } } }"
mergeIniFiles,"$files = Get-ChildItem 'C:\\path\\' -Filter '*.ini'; $ini = @{}; $files | ForEach-Object { $section = ''; Get-Content $_.FullName | ForEach-Object { if ($_ -match '^\[(.+)\]$') { $section = $matches[1]; if (-not $ini[$section]) { $ini[$section] = @{} } } elseif ($_ -match '(.+)=(.+)') { $ini[$section][$matches[1].Trim()] = $matches[2].Trim() } } }; $ini | Export-Csv 'C:\\path\\merged.ini' -NoTypeInformation"
removeLinesByKeyword,"Get-Content 'C:\\path\\file.txt' | Where-Object { $_ -notmatch 'Keyword' } | Set-Content 'C:\\path\\filtered.txt'"
replaceJsonValues,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $json | ForEach-Object { $_.Property = $_.Property -replace 'OldValue','NewValue' }; $json | ConvertTo-Json | Set-Content 'C:\\path\\file.json'"
filterByRegex,"Get-Content 'C:\\path\\file.txt' | Where-Object { $_ -match '^\d{3}-\d{2}-\d{4}$' } | Set-Content 'C:\\path\\filtered.txt'"
unescapeJsonString,"$json = '\"Hello\\nWorld\"'; [System.Web.HttpUtility]::HtmlDecode($json)"
escapeJsonString,"$string = 'Hello\nWorld'; [System.Web.HttpUtility]::HtmlEncode($string)"
convertCsvToJson,"Import-Csv 'C:\\path\\file.csv' | ConvertTo-Json | Set-Content 'C:\\path\\file.json'"
calculateCsvColumnDifference,"Import-Csv 'C:\\path\\file.csv' | ForEach-Object { $_ | Add-Member -MemberType NoteProperty -Name 'Difference' -Value ([int]$_.Column1 - [int]$_.Column2) -Force; $_ } | Export-Csv 'C:\\path\\file.csv' -NoTypeInformation"
generateCsvTemplate,"1..10 | ForEach-Object { $i = $_; $props = @(); 1..5 | ForEach-Object { $props += 'Column'+$_ }; [PSCustomObject]@{ Column1 = $i; Column2 = 'Value'+$i; Column3 = 'Value'+$i; Column4 = 'Value'+$i; Column5 = 'Value'+$i } } | Export-Csv 'C:\\path\\template.csv' -NoTypeInformation"
createPivotTable,"$data = Import-Csv 'C:\\path\\file.csv'; $pivot = $data | Group-Object ColumnToGroup | ForEach-Object { $_.Group | Measure-Object ColumnToAggregate -Sum } | Select-Object @{Name='Group';Expression={$_.Group}}, @{Name='Total';Expression={$_.Sum}}; $pivot | Export-Csv 'C:\\path\\pivot.csv' -NoTypeInformation"
replaceMultipleStrings,"(Get-Content 'C:\\path\\file.txt') -replace 'old1','new1' -replace 'old2','new2' | Set-Content 'C:\\path\\file.txt'"
convertArrayToHashtable,"$array = @(@('Key1','Value1'),@('Key2','Value2')); $hashtable = @{}; $array | ForEach-Object { $hashtable[$_[0]] = $_[1] }"
stripHtmlTags,"Get-Content 'C:\\path\\file.html' | ForEach-Object { $_ -replace '<[^>]+>','' } | Set-Content 'C:\\path\\plain.txt'"
getUniqueWords,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ -split '\W+' } | Sort-Object -Unique"
tokenizeText,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ -split '\s+' }"
generateRandomString,"-join ((65..90) + (97..122) + (48..57) | Get-Random -Count 8 | % {[char]$_})"
padString,"'123'.PadLeft(5,'0')"
calculateStringLength,"'Hello World'.Length"
trimSpecialCharacters,"'Hello, World!' -replace '[^a-zA-Z0-9 ]',''"
replaceNewlinesWithSpaces,"(Get-Content 'C:\\path\\file.txt') -replace '\r\n',' ' | Set-Content 'C:\\path\\file.txt'"
filterJsonByKeyValue,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $json | Where-Object { $_.Key -eq 'Value' } | ConvertTo-Json | Set-Content 'C:\\path\\filtered.json'"
renameCsvColumns,"Import-Csv 'C:\\path\\file.csv' | Select-Object @{Name='NewName1';Expression={$_.'OldName1'}}, @{Name='NewName2';Expression={$_.'OldName2'}} | Export-Csv 'C:\\path\\renamed.csv' -NoTypeInformation"
combineJsonFiles,"$json1 = Get-Content 'C:\\path\\file1.json' | ConvertFrom-Json; $json2 = Get-Content 'C:\\path\\file2.json' | ConvertFrom-Json; $combined = $json1 + $json2; $combined | ConvertTo-Json | Set-Content 'C:\\path\\combined.json'"
calculateMedian,"$values = 1..10; $sorted = $values | Sort-Object; $count = $sorted.Count; if ($count % 2 -eq 0) { ($sorted[$count / 2 - 1] + $sorted[$count / 2]) / 2 } else { $sorted[($count - 1) / 2] }"
reverseString,"'Hello World' -split '' | ForEach-Object {$_} | Sort-Object -Descending | ForEach-Object {$_} -join ''"
getCsvRowCount,"(Import-Csv 'C:\\path\\file.csv').Count"
addJsonProperty,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $json | ForEach-Object { $_ | Add-Member -NotePropertyName 'NewProperty' -NotePropertyValue 'NewValue' }; $json | ConvertTo-Json | Set-Content 'C:\\path\\file.json'"
removeJsonProperty,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $json | ForEach-Object { $_.PSObject.Properties.Remove('PropertyToRemove') }; $json | ConvertTo-Json | Set-Content 'C:\\path\\file.json'"
countWordOccurrences,"Get-Content 'C:\\path\\file.txt' | Select-String -Pattern '\\bword\\b' -AllMatches | Measure-Object"
replaceCharacterInString,"'Hello World' -replace 'o', 'a'"
extractNumbersFromString,"'abc123def456' -replace '\D', ''"
findLongestWord,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ -split ' ' } | Sort-Object Length -Descending | Select-Object -First 1"
findShortestWord,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ -split ' ' } | Sort-Object Length | Select-Object -First 1"
createJsonTemplate,"$template = [PSCustomObject]@{ Property1 = ''; Property2 = ''; Property3 = '' }; $template | ConvertTo-Json | Set-Content 'C:\\path\\template.json'"
splitJsonArray,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $split = $json | ForEach-Object { $_ | ConvertTo-Json | Out-File ('C:\\path\\split' + ($json.IndexOf($_) + 1) + '.json') }"
mergeTextFiles,"Get-Content 'C:\\path\\file1.txt','C:\\path\\file2.txt' | Set-Content 'C:\\path\\merged.txt'"
generateXmlFromCsv,"$csv = Import-Csv 'C:\\path\\file.csv'; $xml = New-Object System.Xml.XmlDocument; $root = $xml.CreateElement('Root'); $xml.AppendChild($root); $csv | ForEach-Object { $row = $xml.CreateElement('Row'); $_.PSObject.Properties | ForEach-Object { $field = $xml.CreateElement($_.Name); $field.InnerText = $_.Value; $row.AppendChild($field) }; $root.AppendChild($row) }; $xml.Save('C:\\path\\file.xml')"
convertXmlToJson,"$xml = [xml](Get-Content 'C:\\path\\file.xml'); $json = $xml | ConvertTo-Json; $json | Set-Content 'C:\\path\\file.json'"
sortJsonByKey,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $sorted = $json | Sort-Object -Property Key; $sorted | ConvertTo-Json | Set-Content 'C:\\path\\sorted.json'"
getFileExtension,"'C:\\path\\file.txt' -split '\\.' | Select-Object -Last 1"
mergeCsvColumns,"Import-Csv 'C:\\path\\file.csv' | ForEach-Object { $_ | Add-Member -MemberType NoteProperty -Name 'MergedColumn' -Value ($_.Column1 + ' ' + $_.Column2); $_ } | Export-Csv 'C:\\path\\merged.csv' -NoTypeInformation"
splitStringByWhitespace,"'This is a test string' -split '\s+'"
normalizeCase,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_.ToLower() } | Set-Content 'C:\\path\\file.txt'"
convertCsvToXml,"$csv = Import-Csv 'C:\\path\\file.csv'; $xml = [xml]'<Root/>'; $csv | ForEach-Object { $row = $xml.CreateElement('Row'); $_.PSObject.Properties | ForEach-Object { $node = $xml.CreateElement($_.Name); $node.InnerText = $_.Value; $row.AppendChild($node) }; $xml.Root.AppendChild($row) }; $xml.Save('C:\\path\\file.xml')"
calculateCsvAverage,"Import-Csv 'C:\\path\\file.csv' | Measure-Object -Property 'ColumnName' -Average"
reverseCsvColumns,"Import-Csv 'C:\\path\\file.csv' | ForEach-Object { $_.PSObject.Properties.Reverse() } | Export-Csv 'C:\\path\\reversed.csv' -NoTypeInformation"
calculateMode,"$values = 1,2,2,3,3,3,4,4,5; $values | Group-Object | Sort-Object Count -Descending | Select-Object -First 1 -ExpandProperty Name"
splitTextByLength,"$text = 'abcdefghij'; $length = 2; $chunks = [regex]::Matches($text, '.{1,'+$length+'}').Value"
convertTextToHex,"'Hello World' | ForEach-Object { [System.BitConverter]::ToString([System.Text.Encoding]::UTF8.GetBytes($_)) -replace '-' }"
convertHexToText,"$hex = '48656C6C6F20576F726C64'; -join ($hex -split '(.{2})' | Where-Object { $_ }) | ForEach-Object { [char][byte]('0x' + $_) }"
aggregateCsvData,"Import-Csv 'C:\\path\\file.csv' | Group-Object -Property 'Category' | ForEach-Object { [PSCustomObject]@{ Category = $_.Name; Total = ($_.Group | Measure-Object -Property 'Amount' -Sum).Sum } } | Export-Csv 'C:\\path\\aggregated.csv' -NoTypeInformation"
removeCsvRows,"Import-Csv 'C:\\path\\file.csv' | Where-Object { $_.ColumnName -ne 'ValueToRemove' } | Export-Csv 'C:\\path\\filtered.csv' -NoTypeInformation"
createCsvSummary,"Import-Csv 'C:\\path\\file.csv' | Group-Object -Property 'Category' | ForEach-Object { [PSCustomObject]@{ Category = $_.Name; Count = $_.Count; Total = ($_.Group | Measure-Object -Property 'Amount' -Sum).Sum } } | Export-Csv 'C:\\path\\summary.csv' -NoTypeInformation"
convertTextToBinary,"'Hello' | ForEach-Object { [Convert]::ToString([byte][char]$_, 2).PadLeft(8,'0') }"
convertBinaryToText,"$binary = '01001000 01100101 01101100 01101100 01101111'; -join ($binary -split ' ' | ForEach-Object { [char][convert]::ToInt32($_, 2) })"
shiftStringCharacters,"'abcdef' | ForEach-Object { [string]::Join('', $_[1..($_.Length-1)] + $_[0]) }"
sortLinesAlphabetically,"Get-Content 'C:\\path\\file.txt' | Sort-Object | Set-Content 'C:\\path\\sorted.txt'"
countCharacterOccurrences,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ -split '' | Group-Object | Sort-Object Count -Descending }"
maskSensitiveData,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ -replace '\d{4}-\d{4}-\d{4}-\d{4}', '****-****-****-****' } | Set-Content 'C:\\path\\masked.txt'"
getHtmlContent,"$url = 'https://example.com'; Invoke-WebRequest -Uri $url -UseBasicParsing"
downloadImage,"$url = 'https://example.com/image.jpg'; $output = 'C:\\path\\image.jpg'; Invoke-WebRequest -Uri $url -OutFile $output"
extractHtmlTitle,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.title"
extractHtmlMetaTags,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('meta')"
scrapeHyperlinks,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).Links | Select-Object href"
scrapeTextContent,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.body.innerText"
scrapeTableData,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('table') | ForEach-Object { $_.outerHTML }"
getWebPageHeaders,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).Headers"
downloadFileFromLink,"$url = 'https://example.com/file.zip'; $output = 'C:\\path\\file.zip'; Invoke-WebRequest -Uri $url -OutFile $output"
scrapeImageSources,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('img') | Select-Object src"
followRedirect,"$url = 'https://example.com/redirect'; (Invoke-WebRequest -Uri $url -MaximumRedirection 5 -UseBasicParsing).Headers.Location"
extractHtmlParagraphs,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('p') | Select-Object innerText"
extractHtmlLinksText,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).Links | Select-Object innerText"
parseJsonFromWeb,"$url = 'https://api.example.com/data.json'; (Invoke-WebRequest -Uri $url -UseBasicParsing).Content | ConvertFrom-Json"
scrapeWebPageTitle,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.title"
scrapeFormInputs,"$url = 'https://example.com/form'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('input')"
submitWebForm,"$url = 'https://example.com/form'; $params = @{ 'username'='user'; 'password'='pass' }; Invoke-WebRequest -Uri $url -Method Post -Body $params -UseBasicParsing"
extractH1Tags,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('h1') | Select-Object innerText"
scrapeJsonApi,"$url = 'https://api.example.com/data.json'; (Invoke-WebRequest -Uri $url -UseBasicParsing).Content | ConvertFrom-Json"
extractSpecificHtmlElement,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementById('elementId').innerText"
downloadWebPage,"$url = 'https://example.com'; $output = 'C:\\path\\page.html'; Invoke-WebRequest -Uri $url -OutFile $output"
extractCssClasses,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.body.getElementsByClassName('classname') | Select-Object innerText"
scrapeScriptTags,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('script') | Select-Object src"
extractInlineCss,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('style') | Select-Object innerText"
findBrokenLinks,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).Links | ForEach-Object { if (!(Test-Connection $_.href -Quiet)) { $_.href } }"
scrapeSpecificHtmlTag,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('tagname') | Select-Object innerText"
scrapePageWithAuthentication,"$url = 'https://example.com'; $cred = Get-Credential; Invoke-WebRequest -Uri $url -Credential $cred -UseBasicParsing"
scrapeHtmlTableRows,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('tr') | ForEach-Object { $_.outerHTML }"
downloadCssFiles,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('link') | Where-Object { $_.rel -eq 'stylesheet' } | ForEach-Object { Invoke-WebRequest -Uri $_.href -OutFile ('C:\\path\\' + $_.href.Split('/')[-1]) }"
scrapeHiddenInputs,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('input') | Where-Object { $_.type -eq 'hidden' }"
extractDataAttributes,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.body.querySelectorAll('[data-*]') | ForEach-Object { $_.outerHTML }"
scrapeAllForms,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.forms"
extractAllLinks,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).Links"
scrapePagination,"$url = 'https://example.com/page='; 1..5 | ForEach-Object { Invoke-WebRequest -Uri ($url + $_) -UseBasicParsing }"
extractAnchorLinks,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('a') | Where-Object { $_.href -match '^#' }"
extractDataFromTables,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('table') | ForEach-Object { $_.outerHTML }"
extractWebsiteFavicon,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.querySelector('link[rel=icon]')"
findImagesByAltText,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('img') | Where-Object { $_.alt -match 'alt text' }"
getWebPageStatus,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).StatusCode"
downloadJsFiles,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('script') | Where-Object { $_.src -match '\.js$' } | ForEach-Object { Invoke-WebRequest -Uri $_.src -OutFile ('C:\\path\\' + $_.src.Split('/')[-1]) }"
scrapeJsonFromWebApi,"$url = 'https://api.example.com/data'; Invoke-WebRequest -Uri $url -UseBasicParsing | ConvertFrom-Json"
scrapeContentByXPath,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.SelectNodes('//div[@class=\"example-class\"]') | ForEach-Object { $_.innerText }"
downloadPdfFromUrl,"$url = 'https://example.com/file.pdf'; $output = 'C:\\path\\file.pdf'; Invoke-WebRequest -Uri $url -OutFile $output"
scrapeMetaDescription,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('meta') | Where-Object { $_.name -eq 'description' } | Select-Object content"
scrapeImageAltText,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('img') | Select-Object alt"
scrapeCanonicalUrl,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.querySelector('link[rel=canonical]').href"
downloadAllCss,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('link') | Where-Object { $_.rel -eq 'stylesheet' } | ForEach-Object { Invoke-WebRequest -Uri $_.href -OutFile ('C:\\path\\' + $_.href.Split('/')[-1]) }"
scrapeOpenGraphTags,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('meta') | Where-Object { $_.property -like 'og:*' }"
scrapeInlineJavaScript,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('script') | Where-Object { ![string]::IsNullOrEmpty($_.innerText) } | Select-Object innerText"
scrapeFooterLinks,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.querySelectorAll('footer a') | Select-Object href"
scrapeSpecificClassElements,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByClassName('specific-class') | Select-Object outerHTML"
downloadAllScripts,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('script') | Where-Object { $_.src } | ForEach-Object { Invoke-WebRequest -Uri $_.src -OutFile ('C:\\path\\' + $_.src.Split('/')[-1]) }"
scrapeDataAttributes,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.querySelectorAll('[data-*]') | ForEach-Object { $_.outerHTML }"
extractElementById,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementById('element-id').outerHTML"
scrapeFormActionUrls,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.forms | Select-Object action"
scrapeWebPageLanguage,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.documentElement.lang"
extractStructuredData,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.querySelectorAll('[type=\"application/ld+json\"]') | ForEach-Object { $_.innerText }"
scrapeUnorderedLists,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('ul') | ForEach-Object { $_.outerHTML }"
scrapeOrderedLists,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('ol') | ForEach-Object { $_.outerHTML }"
scrapePageLoadTime,"$url = 'https://example.com'; Measure-Command { Invoke-WebRequest -Uri $url -UseBasicParsing }"
scrapeAllVideoLinks,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('video') | Select-Object src"
scrapeIframeSources,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('iframe') | Select-Object src"
scrapeButtonTexts,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('button') | Select-Object innerText"
scrapeAnchorTitles,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('a') | Select-Object title"
scrapeH2Tags,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('h2') | Select-Object innerText"
scrapeH3Tags,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('h3') | Select-Object innerText"
extractPageEncoding,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.characterSet"
scrapeRobotsTxt,"$url = 'https://example.com/robots.txt'; Invoke-WebRequest -Uri $url -UseBasicParsing | Select-Object Content"
scrapeSitemapXml,"$url = 'https://example.com/sitemap.xml'; Invoke-WebRequest -Uri $url -UseBasicParsing | Select-Object Content"
scrapeJsonLd,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.querySelectorAll('script[type=\"application/ld+json\"]') | ForEach-Object { $_.innerText }"
scrapeSpanElements,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('span') | Select-Object innerText"
extractPageCharset,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.characterSet"
scrapeWebPageSource,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).RawContent"
scrapeBlockquotes,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('blockquote') | Select-Object innerText"
scrapeNavLinks,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.querySelectorAll('nav a') | Select-Object href"
scrapeWebPageCommentTags,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.comments"
extractInnerHtml,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.body.innerHTML"
scrapeEmailAddresses,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).Content -match '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b' | Select-String -Pattern '[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}' -AllMatches | Select-Object -ExpandProperty Matches | ForEach-Object { $_.Value }"
scrapeKeywordsMetaTag,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('meta') | Where-Object { $_.name -eq 'keywords' } | Select-Object content"
scrapeBoldText,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('b') | Select-Object innerText"
scrapeWebPageViewports,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.querySelector('meta[name=\"viewport\"]').content"
createEmptyHashtable,"$hashtable = @{}"
addKeyValue,"$hashtable['key'] = 'value'"
removeKey,"$hashtable.Remove('key')"
checkKeyExists,"$hashtable.ContainsKey('key')"
checkValueExists,"$hashtable.ContainsValue('value')"
getHashtableKeys,"$hashtable.Keys"
getHashtableValues,"$hashtable.Values"
getValueByKey,"$value = $hashtable['key']"
clearHashtable,"$hashtable.Clear()"
countHashtableItems,"$count = $hashtable.Count"
iterateHashtable,"$hashtable.GetEnumerator() | ForEach-Object { Write-Host $_.Key $_.Value }"
convertToJson,"$json = $hashtable | ConvertTo-Json"
convertFromJson,"$hashtable = ConvertFrom-Json '{\"key\":\"value\"}'"
mergeHashtables,"$merged = @{}; $hashtable1.GetEnumerator() | ForEach-Object { $merged[$_.Key] = $_.Value }; $hashtable2.GetEnumerator() | ForEach-Object { $merged[$_.Key] = $_.Value }"
cloneHashtable,"$clone = $hashtable.Clone()"
sortHashtableByKey,"$sorted = $hashtable.GetEnumerator() | Sort-Object Key"
sortHashtableByValue,"$sorted = $hashtable.GetEnumerator() | Sort-Object Value"
convertHashtableToArray,"$array = @($hashtable.GetEnumerator())"
filterHashtable,"$filtered = $hashtable.GetEnumerator() | Where-Object { $_.Value -gt 10 } | ForEach-Object { $_.Key, $_.Value }"
convertHashtableToString,"$string = [string]::Join('; ', $hashtable.GetEnumerator() | ForEach-Object { $_.Key + '=' + $_.Value })"
reverseHashtable,"$reversed = @{}; $hashtable.GetEnumerator() | ForEach-Object { $reversed[$_.Value] = $_.Key }"
convertHashtableToDictionary,"$dictionary = New-Object 'System.Collections.Generic.Dictionary[System.String,System.String]'; $hashtable.GetEnumerator() | ForEach-Object { $dictionary.Add($_.Key, $_.Value) }"
updateHashtableValue,"$hashtable['key'] = 'newValue'"
initializeHashtableWithValues,"$hashtable = @{'key1' = 'value1'; 'key2' = 'value2'}"
removeMultipleKeys,"'key1','key2' | ForEach-Object { $hashtable.Remove($_) }"
compareHashtables,"$areEqual = Compare-Object -ReferenceObject $hashtable1 -DifferenceObject $hashtable2 -Property Key, Value -PassThru"
convertHashtableToXml,"$xml = $hashtable.GetEnumerator() | ForEach-Object { New-Object PSObject -Property @{ Key = $_.Key; Value = $_.Value } } | ConvertTo-Xml"
createNestedHashtable,"$nested = @{'parentKey' = @{'childKey' = 'childValue'}}"
accessNestedHashtable,"$childValue = $nested['parentKey']['childKey']"
updateNestedHashtable,"$nested['parentKey']['childKey'] = 'newChildValue'"
flattenNestedHashtable,"$flattened = @{}; function Flatten-Hashtable($ht, $prefix='') { $ht.GetEnumerator() | ForEach-Object { $newKey = if ($prefix) { $prefix + '.' + $_.Key } else { $_.Key }; if ($_.Value -is [hashtable]) { Flatten-Hashtable -ht $_.Value -prefix $newKey } else { $flattened[$newKey] = $_.Value } } }; Flatten-Hashtable -ht $nested"
getNestedKeys,"$keys = $nested['parentKey'].Keys"
convertHashtableToPsCustomObject,"$psObject = [PSCustomObject]$hashtable"
deserializeHashtableFromXml,"$xml = '<xml><entry key=\"key1\" value=\"value1\" /></xml>'; $xmlDoc = [xml]$xml; $deserialized = @{}; $xmlDoc.xml.entry | ForEach-Object { $deserialized[$_.key] = $_.value }"
checkHashtableIsEmpty,"$isEmpty = $hashtable.Count -eq 0"
accessHashtableWithDefaultValue,"$value = $hashtable['nonexistentKey'] -or 'defaultValue'"
compareHashtableKeys,"$commonKeys = $hashtable1.Keys | Where-Object { $hashtable2.ContainsKey($_) }"
exportHashtableToCsv,"$hashtable.GetEnumerator() | Export-Csv -Path 'C:\\hashtable.csv' -NoTypeInformation"
importHashtableFromCsv,"$imported = @{}; Import-Csv -Path 'C:\\hashtable.csv' | ForEach-Object { $imported[$_.Key] = $_.Value }"
convertHashtableToBson,"$bson = [System.Text.Encoding]::UTF8.GetBytes(($hashtable | ConvertTo-Json)); [MongoDB.Bson.BsonDocument]::Parse([System.Text.Encoding]::UTF8.GetString($bson))"
calculateHashtableSize,"$size = ($hashtable.GetEnumerator() | Measure-Object Length -Sum).Sum"
createEmptyArray,"$array = @()"
addItemToArray,"$array += 'item'"
removeItemFromArray,"$array = $array | Where-Object { $_ -ne 'item' }"
checkArrayContains,"$contains = $array -contains 'item'"
getArrayLength,"$length = $array.Length"
accessArrayElement,"$element = $array[0]"
iterateArray,"$array | ForEach-Object { Write-Host $_ }"
sortArrayAscending,"$sortedArray = $array | Sort-Object"
sortArrayDescending,"$sortedArray = $array | Sort-Object -Descending"
reverseArray,"$reversedArray = $array[([array]::Reverse($array))]"
joinArray,"$joinedString = $array -join ','"
splitStringToArray,"$array = 'item1,item2,item3' -split ','"
convertArrayToHashtable,"$hashtable = @{}; $array | ForEach-Object { $hashtable[$_] = $_ }"
findArrayIndex,"$index = $array.IndexOf('item')"
filterArray,"$filteredArray = $array | Where-Object { $_ -gt 10 }"
convertArrayToJson,"$json = $array | ConvertTo-Json"
convertFromJsonToArray,"$array = ConvertFrom-Json '[\"item1\", \"item2\"]'"
removeDuplicates,"$uniqueArray = $array | Select-Object -Unique"
flattenNestedArray,"$flatArray = $array -join ',' | -split ','"
cloneArray,"$clonedArray = $array.Clone()"
createArrayWithInitialValues,"$array = @('value1', 'value2', 'value3')"
initializeArrayWithRange,"$array = 1..10"
getArraySubset,"$subset = $array[1..3]"
findMaxValue,"$maxValue = $array | Measure-Object -Maximum"
findMinValue,"$minValue = $array | Measure-Object -Minimum"
calculateArraySum,"$sum = $array | Measure-Object -Sum"
convertArrayToString,"$string = [string]::Join(', ', $array)"
mergeArrays,"$mergedArray = $array1 + $array2"
groupArrayElements,"$groupedArray = $array | Group-Object"
splitArrayIntoChunks,"$chunkSize = 2; $chunks = [System.Collections.Generic.List[Object]]::new(); 0..($array.Count - 1) | ForEach-Object { if ($_ % $chunkSize -eq 0) { $chunks.Add(@($array[$_..([Math]::Min($_ + $chunkSize - 1, $array.Count - 1))])) } }; $chunks"
convertArrayToDictionary,"$dictionary = @{}; $array | ForEach-Object { $dictionary[$_] = $_ }"
filterArrayByType,"$stringArray = $array | Where-Object { $_ -is [string] }"
findCommonElements,"$commonElements = $array1 | Where-Object { $array2 -contains $_ }"
findDifferenceBetweenArrays,"$difference = Compare-Object -ReferenceObject $array1 -DifferenceObject $array2 -PassThru"
convertCsvToArray,"$array = Import-Csv -Path 'C:\\file.csv' | ForEach-Object { $_.ColumnName }"
exportArrayToCsv,"$array | Export-Csv -Path 'C:\\array.csv' -NoTypeInformation"
shuffleArray,"$shuffledArray = $array | Sort-Object { Get-Random }"
convertArrayToPsCustomObject,"$psObjectArray = $array | ForEach-Object { [PSCustomObject]@{ Name = $_ } }"
removeNullValues,"$cleanArray = $array | Where-Object { $_ -ne $null }"
replaceArrayElement,"$array[0] = 'newItem'"
calculateAverageValue,"$average = ($array | Measure-Object -Average).Average"
checkIfEqual,"if ('value1' -eq 'value2') { 'Equal' }"
checkIfNotEqual,"if ('value1' -ne 'value2') { 'Not Equal' }"
checkIfGreaterThan,"if (5 -gt 3) { 'Greater' }"
checkIfLessThan,"if (3 -lt 5) { 'Less' }"
checkIfGreaterOrEqual,"if (5 -ge 5) { 'Greater or Equal' }"
checkIfLessOrEqual,"if (3 -le 5) { 'Less or Equal' }"
useIfElse,"if ($value -eq 'expected') { 'True' } else { 'False' }"
useIfElseifElse,"if ($value -eq 'first') { 'First' } elseif ($value -eq 'second') { 'Second' } else { 'Other' }"
useSwitchStatement,"switch ($value) { 'case1' { 'First case' } 'case2' { 'Second case' } Default { 'Default case' } }"
useTernaryOperator,"$result = ($value -eq 'expected') ? 'Yes' : 'No'"
checkIfNull,"if ($variable -eq $null) { 'Null' }"
checkIfNotNull,"if ($variable -ne $null) { 'Not Null' }"
checkIfFileExists,"if (Test-Path 'C:\\path\\to\\file.txt') { 'Exists' }"
checkIfDirectoryExists,"if (Test-Path 'C:\\path\\to\\directory') { 'Exists' }"
checkIfArrayContains,"if ($array -contains 'value') { 'Contains' }"
checkIfStringStartsWith,"if ($string.StartsWith('prefix')) { 'Starts with prefix' }"
checkIfStringEndsWith,"if ($string.EndsWith('suffix')) { 'Ends with suffix' }"
checkIfStringContains,"if ($string -like '*substring*') { 'Contains substring' }"
checkIfStringMatchesRegex,"if ($string -match 'pattern') { 'Matches pattern' }"
useTryCatch,"try { Invoke-Command { Do-Something } } catch { 'Error occurred' }"
checkIfNumberIsEven,"if ($number % 2 -eq 0) { 'Even' }"
checkIfNumberIsOdd,"if ($number % 2 -ne 0) { 'Odd' }"
checkIfObjectIsType,"if ($object -is [string]) { 'Is String' }"
useNestedIf,"if ($value1 -eq 'expected1') { if ($value2 -eq 'expected2') { 'Both conditions met' } }"
checkIfArrayIsEmpty,"if ($array.Count -eq 0) { 'Array is empty' }"
checkIfArrayIsNotEmpty,"if ($array.Count -gt 0) { 'Array is not empty' }"
checkIfHashtableContainsKey,"if ($hashtable.ContainsKey('key')) { 'Key exists' }"
checkIfHashtableContainsValue,"if ($hashtable.ContainsValue('value')) { 'Value exists' }"
checkIfAllConditionsMet,"if ($cond1 -and $cond2) { 'All conditions met' }"
checkIfAnyConditionMet,"if ($cond1 -or $cond2) { 'At least one condition met' }"
checkIfNotCondition,"if (-not $condition) { 'Condition not met' }"
checkIfEmptyString,"if ([string]::IsNullOrEmpty($string)) { 'String is empty' }"
checkIfNotEmptyString,"if (-not [string]::IsNullOrEmpty($string)) { 'String is not empty' }"
useSwitchWithRegex,"switch -Regex ($value) { '^a.*' { 'Starts with a' } '^\d+' { 'Starts with a number' } Default { 'No match' } }"
useSwitchWithMultipleCases,"switch ($value) { 'case1' {'Case 1'} 'case2','case3' {'Case 2 or 3'} Default {'Other case'} }"
checkFileAge,"if ((Get-Item 'C:\\path\\to\\file.txt').LastWriteTime -lt (Get-Date).AddDays(-7)) { 'File is older than 7 days' }"
checkIfProcessRunning,"if (Get-Process -Name 'processName' -ErrorAction SilentlyContinue) { 'Process is running' }"
useWhileLoop,"while ($i -lt 10) { $i++; 'Loop iteration' }"
useDoWhileLoop,"do { $i++; 'Loop iteration' } while ($i -lt 10)"
useDoUntilLoop,"do { $i++; 'Loop iteration' } until ($i -ge 10)"
regexMatchExact,"if ('PowerShell' -match '^PowerShell$') { 'Match' }"
regexMatchStart,"if ('PowerShell' -match '^Power') { 'Match' }"
regexMatchEnd,"if ('PowerShell' -match 'Shell$') { 'Match' }"
regexContainsWord,"if ('This is PowerShell' -match '\bPowerShell\b') { 'Contains Word' }"
regexIgnoreCase,"if ('POWERSHELL' -match '(?i)powershell') { 'Match Ignore Case' }"
regexExtractDigits,"$digits = 'Item 12345' -match '\d+'; $matches[0]"
regexExtractLetters,"$letters = 'Item 12345' -match '[a-zA-Z]+'; $matches[0]"
regexExtractEmail,"$email = 'contact@example.com' -match '\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'; $matches[0]"
regexValidateEmail,"if ('contact@example.com' -match '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}$') { 'Valid Email' }"
regexExtractUrl,"$url = 'Visit https://example.com for more info' -match 'https?://\S+'; $matches[0]"
regexValidateUrl,"if ('https://example.com' -match '^https?://\S+$') { 'Valid URL' }"
regexExtractIpAddress,"$ip = 'Ping 192.168.1.1' -match '\b\d{1,3}(\.\d{1,3}){3}\b'; $matches[0]"
regexValidateIpAddress,"if ('192.168.1.1' -match '^\d{1,3}(\.\d{1,3}){3}$') { 'Valid IP' }"
regexExtractDate,"$date = 'Today's date is 2024-08-31' -match '\d{4}-\d{2}-\d{2}'; $matches[0]"
regexValidateDate,"if ('2024-08-31' -match '^\d{4}-\d{2}-\d{2}$') { 'Valid Date' }"
regexExtractPhoneNumber,"$phone = 'Call me at (123) 456-7890' -match '\(\d{3}\) \d{3}-\d{4}'; $matches[0]"
regexValidatePhoneNumber,"if ('(123) 456-7890' -match '^\(\d{3}\) \d{3}-\d{4}$') { 'Valid Phone Number' }"
regexExtractHexColor,"$color = '#FF5733 is a color code' -match '#[A-Fa-f0-9]{6}'; $matches[0]"
regexValidateHexColor,"if ('#FF5733' -match '^#[A-Fa-f0-9]{6}$') { 'Valid Hex Color' }"
regexExtractCurrency,"$currency = 'The total is $123.45' -match '\$\d+(\.\d{2})?'; $matches[0]"
regexValidateCurrency,"if ('$123.45' -match '^\$\d+(\.\d{2})?$') { 'Valid Currency' }"
regexExtractTime,"$time = 'The time is 14:30' -match '\b\d{2}:\d{2}\b'; $matches[0]"
regexValidateTime,"if ('14:30' -match '^\d{2}:\d{2}$') { 'Valid Time' }"
regexExtractWords,"$words = 'This is a test' -match '\b\w+\b'; $matches"
regexValidateAlphanumeric,"if ('abc123' -match '^[a-zA-Z0-9]+$') { 'Valid Alphanumeric' }"
regexExtractSubdomain,"$subdomain = 'Visit https://sub.example.com' -match 'https?://([^/]+\.)?example\.com'; $matches[1]"
regexValidateSubdomain,"if ('https://sub.example.com' -match '^https?://([^/]+\.)?example\.com') { 'Valid Subdomain' }"
regexExtractFilename,"$filename = 'Path/to/file.txt' -match '[^/]+$'; $matches[0]"
regexValidateFilename,"if ('file.txt' -match '^[^/\\:*?""<>|]+$') { 'Valid Filename' }"
regexExtractDomainFromEmail,"$domain = 'user@example.com' -match '@(.+)$'; $matches[1]"
regexValidatePositiveInteger,"if ('123' -match '^\d+$') { 'Valid Positive Integer' }"
regexExtractCsvValues,"$csv = 'a,b,c' -match '[^,]+'; $matches"
regexValidateCsvLine,"if ('a,b,c' -match '^[^,]+(,[^,]+)*$') { 'Valid CSV Line' }"
regexExtractQuotedText,"$quoted = 'She said, \"Hello\"' -match '\"([^\"]*)\"'; $matches[1]"
regexValidateQuotedText,"if ('\"Hello\"' -match '^\"[^\"]*\"$') { 'Valid Quoted Text' }"
regexExtractMultipleMatches,"'123 abc 456 def' -match '\d+' | ForEach-Object { $_ }"
regexValidatePasswordComplexity,"if ('P@ssw0rd' -match '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$') { 'Valid Password' }"
regexExtractLineBreaks,"'Line1`nLine2' -match '\r?\n'; $matches"
regexValidateUSPostalCode,"if ('12345' -match '^\d{5}(-\d{4})?$') { 'Valid US Postal Code' }"
regexExtractHtmlTags,"'<p>Paragraph</p>' -match '<[^>]+>'; $matches"
regexValidateHtmlTags,"if ('<p>Paragraph</p>' -match '^<[^>]+>.*<\/[^>]+>$') { 'Valid HTML Tags' }"
regexReplacePattern,"'hello world' -replace 'world', 'PowerShell'"
regexSplitTextByDelimiter,"'name1:name2:name3' -split ':'"
regexRemoveWhitespace,"'  text with spaces  ' -replace '\s+', ''"
regexExtractAlphaNumericOnly,"$alphanumeric = 'User!@#123' -replace '[^a-zA-Z0-9]', ''; $alphanumeric"
regexExtractUppercaseLetters,"$uppercase = 'This Is A Test' -match '[A-Z]+'; $matches[0]"
regexExtractLowercaseLetters,"$lowercase = 'This Is A Test' -match '[a-z]+'; $matches[0]"
regexValidateMacAddress,"if ('01:23:45:67:89:AB' -match '^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$') { 'Valid MAC Address' }"
regexExtractQuotedTextSingle,"$quoted = 'It''s a ''quote''' -match '''([^'']*)'''; $matches[1]"
regexExtractPatternWithGroups,"$text = 'error code: 404' -match '(error) code: (\d+)'; $matches[1,2]"
regexMatchNonWhitespace,"if ('word' -match '\S+') { 'Match non-whitespace' }"
regexMatchWhitespace,"if (' ' -match '\s') { 'Match whitespace' }"
regexMatchWordBoundary,"if ('test' -match '\btest\b') { 'Match word boundary' }"
regexValidateHexNumber,"if ('0xFF' -match '^0x[0-9A-Fa-f]+$') { 'Valid Hex Number' }"
regexExtractHexNumber,"$hex = 'Color code: #00FF00' -match '#[A-Fa-f0-9]{6}'; $matches[0]"
regexValidateUSPhoneNumber,"if ('123-456-7890' -match '^\d{3}-\d{3}-\d{4}$') { 'Valid US Phone Number' }"
regexExtractNonDigits,"$nondigits = 'Item123' -match '\D+'; $matches[0]"
regexExtractNonLetters,"$nonletters = '123MainSt' -match '\W+'; $matches[0]"
regexExtractSentence,"$sentence = 'This is a sentence. Another one.' -match '^[^.]+[.?!]'; $matches[0]"
regexValidateFloatingPointNumber,"if ('3.14' -match '^-?\d+(\.\d+)?$') { 'Valid Floating Point Number' }"
regexExtractNumbersFromString,"$numbers = 'abc123def456' -match '\d+'; $matches"
regexExtractLettersAndDigits,"$lettersDigits = 'Item #1' -match '[A-Za-z0-9]+'; $matches"
regexExtractFileExtension,"$extension = 'file.txt' -match '\.\w+$'; $matches[0]"
regexValidateFileExtension,"if ('file.txt' -match '^\w+\.\w+$') { 'Valid File Extension' }"
regexRemoveSpecialCharacters,"$cleaned = 'Hello, World!' -replace '[^\w\s]', ''; $cleaned"
regexExtractAlphaCharactersOnly,"$alpha = 'User123' -replace '[^a-zA-Z]', ''; $alpha"
regexValidatePositiveNegativeInteger,"if ('-123' -match '^-?\d+$') { 'Valid Positive or Negative Integer' }"
regexExtractSubstringBetweenChars,"$substring = 'example [important] text' -match '\[(.*?)\]'; $matches[1]"
regexExtractParenthesesContent,"$content = '(inner content)' -match '\(([^)]+)\)'; $matches[1]"
regexExtractMultipleEmails,"'test@example.com, user@domain.com' -match '\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'; $matches"
regexValidateInternationalPhoneNumber,"if ('+1-800-555-5555' -match '^\+\d{1,3}-\d{3}-\d{3}-\d{4}$') { 'Valid International Phone Number' }"
regexExtractUrlsFromText,"'Visit http://example.com and https://example.org' -match 'https?://\S+'; $matches"
regexRemoveHTMLTags,"$cleanText = '<p>Paragraph</p>' -replace '<[^>]+>', ''; $cleanText"
regexExtractMultipleGroups,"$text = 'name: John, age: 30' -match 'name: (\w+), age: (\d+)'; $matches[1,2]"
regexValidatePassword,"if ('P@ssw0rd123' -match '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$') { 'Valid Password' }"
regexExtractPhoneNumbers,"'Call (123) 456-7890 or 987-654-3210' -match '\(?\d{3}\)?[\s-]?\d{3}[-\s]?\d{4}'; $matches"
regexValidateUUID,"if ('123e4567-e89b-12d3-a456-426614174000' -match '^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$') { 'Valid UUID' }"
regexExtractMultipleWords,"'first second third' -match '\w+'; $matches"
regexValidateSerialNumber,"if ('SN123-456' -match '^SN\d{3}-\d{3}$') { 'Valid Serial Number' }"
regexExtractAlphaNumeric,"$alphanumeric = 'abc123def456' -match '[a-zA-Z0-9]+'; $matches"
regexExtractDigitsFromEnd,"$digits = 'Test123' -match '\d+$'; $matches[0]"
regexExtractSingleQuotedText,"$quoted = 'It''s a ''single-quoted'' text' -match '''([^'']*)'''; $matches[1]"
regexRemoveDigits,"$noDigits = 'Test123' -replace '\d', ''; $noDigits"
regexExtractSingleDigit,"'Price is $5.00' -match '\d'; $matches[0]"
regexValidateIPv6Address,"if ('2001:0db8:85a3:0000:0000:8a2e:0370:7334' -match '^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$') { 'Valid IPv6 Address' }"
regexReplaceSpacesWithUnderscore,"'replace spaces with underscores' -replace '\s', '_'"
generateRandomInteger,"Get-Random -Minimum 1 -Maximum 100"
generateRandomFloat,"[math]::Round((Get-Random), 2)"
generateRandomString,"-join ((65..90) + (97..122) | Get-Random -Count 10 | % {[char]$_})"
generateRandomName,"$names = @('John','Jane','Alex','Chris','Taylor'); $names | Get-Random"
generateRandomEmail,"$domains = @('example.com', 'test.com', 'demo.net'); $name = ('a'..'z' | Get-Random -Count 6 -Join ''); $domain = $domains | Get-Random; \"$name@$domain\""
generateRandomPhoneNumber,"'({0}) {1}-{2}' -f (Get-Random -Minimum 100 -Maximum 999), (Get-Random -Minimum 100 -Maximum 999), (Get-Random -Minimum 1000 -Maximum 9999)"
generateRandomDate,"Get-Date -Year (Get-Random -Minimum 1980 -Maximum 2024) -Month (Get-Random -Minimum 1 -Maximum 12) -Day (Get-Random -Minimum 1 -Maximum 28)"
generateRandomTime,"Get-Date -Hour (Get-Random -Minimum 0 -Maximum 23) -Minute (Get-Random -Minimum 0 -Maximum 59) -Second (Get-Random -Minimum 0 -Maximum 59) | Select-Object -ExpandProperty TimeOfDay"
generateRandomBoolean,"$booleans = @($true, $false); $booleans | Get-Random"
generateRandomIpAddress,"'{0}.{1}.{2}.{3}' -f (Get-Random -Minimum 1 -Maximum 255), (Get-Random -Minimum 1 -Maximum 255), (Get-Random -Minimum 1 -Maximum 255), (Get-Random -Minimum 1 -Maximum 255)"
generateRandomGuid,"[guid]::NewGuid().ToString()"
generateRandomHexColor,"'#' + (-join ((0..15) | % { [Convert]::ToString((Get-Random -Minimum 0 -Maximum 16), 16) }) -replace '(.{2})','$1')"
generateRandomZipCode,"'{0:D5}' -f (Get-Random -Minimum 0 -Maximum 99999)"
generateRandomCreditCardNumber,"'{0:D4}-{1:D4}-{2:D4}-{3:D4}' -f (Get-Random -Minimum 0 -Maximum 9999), (Get-Random -Minimum 0 -Maximum 9999), (Get-Random -Minimum 0 -Maximum 9999), (Get-Random -Minimum 0 -Maximum 9999)"
generateRandomStreetAddress,"$streets = @('Main St', 'Second Ave', 'Third Blvd', 'Fourth Rd'); '{0} {1}' -f (Get-Random -Minimum 1 -Maximum 9999), ($streets | Get-Random)"
generateRandomCity,"$cities = @('New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix'); $cities | Get-Random"
generateRandomState,"$states = @('NY', 'CA', 'IL', 'TX', 'AZ'); $states | Get-Random"
generateRandomCountry,"$countries = @('USA', 'Canada', 'UK', 'Australia', 'Germany'); $countries | Get-Random"
generateRandomUserAgent,"$agents = @('Mozilla/5.0', 'Chrome/91.0', 'Safari/537.36', 'Edge/91.0', 'Opera/77.0'); $agents | Get-Random"
generateRandomPassword,"-join ((33..126) | Get-Random -Count 12 | % {[char]$_})"
generateRandomSentence,"$words = @('the','quick','brown','fox','jumps','over','the','lazy','dog'); -join ($words | Get-Random -Count 5)"
generateRandomParagraph,"$paragraph = 1..5 | % { $words = @('lorem','ipsum','dolor','sit','amet','consectetur','adipiscing','elit'); -join ($words | Get-Random -Count 10) }; $paragraph -join ' '"
generateRandomMACAddress,"'{0:X2}:{1:X2}:{2:X2}:{3:X2}:{4:X2}:{5:X2}' -f (Get-Random -Minimum 0 -Maximum 255), (Get-Random -Minimum 0 -Maximum 255), (Get-Random -Minimum 0 -Maximum 255), (Get-Random -Minimum 0 -Maximum 255), (Get-Random -Minimum 0 -Maximum 255), (Get-Random -Minimum 0 -Maximum 255)"
generateRandomJobTitle,"$jobs = @('Software Developer', 'System Administrator', 'Data Scientist', 'Project Manager', 'Network Engineer'); $jobs | Get-Random"
generateRandomCompanyName,"$companies = @('Acme Corp', 'Globex Inc', 'Soylent Co', 'Initech LLC', 'Umbrella Ltd'); $companies | Get-Random"
generateRandomProductName,"$products = @('Widget', 'Gadget', 'Thingamajig', 'Doohickey', 'Whatsit'); $products | Get-Random"
generateRandomPrice,"'$' + [math]::Round((Get-Random -Minimum 10 -Maximum 500) + (Get-Random), 2)"
generateRandomSsn,"'{0:D3}-{1:D2}-{2:D4}' -f (Get-Random -Minimum 100 -Maximum 999), (Get-Random -Minimum 10 -Maximum 99), (Get-Random -Minimum 1000 -Maximum 9999)"
generateRandomCoordinates,"'{0:N6}, {1:N6}' -f ((Get-Random -Minimum -90 -Maximum 90) + (Get-Random)), ((Get-Random -Minimum -180 -Maximum 180) + (Get-Random))"
generateRandomBankAccountNumber,"'{0:D8}-{1:D8}' -f (Get-Random -Minimum 0 -Maximum 99999999), (Get-Random -Minimum 0 -Maximum 99999999)"
generateRandomIBAN,"'DE{0:D2} 5001 0517 5407 3249 31' -f (Get-Random -Minimum 10 -Maximum 99)"
generateRandomVehicleLicensePlate,"'{0}-{1:D3}-{2:D2}' -f ('A'..'Z' | Get-Random -Count 3 -Join ''), (Get-Random -Minimum 100 -Maximum 999), (Get-Random -Minimum 10 -Maximum 99)"
generateRandomBooleanString,"$booleans = @('true', 'false'); $booleans | Get-Random"
generateRandomVersionNumber,"'{0}.{1}.{2}' -f (Get-Random -Minimum 0 -Maximum 10), (Get-Random -Minimum 0 -Maximum 100), (Get-Random -Minimum 0 -Maximum 1000)"
generateRandomPostalAddress,"$street = '123 Main St'; $city = 'Anytown'; $state = 'NY'; $zip = '12345'; '{0}, {1}, {2} {3}' -f $street, $city, $state, $zip"
generateRandomGeoLocation,"$latitude = Get-Random -Minimum -90 -Maximum 90; $longitude = Get-Random -Minimum -180 -Maximum 180; 'Latitude: {0}, Longitude: {1}' -f $latitude, $longitude"
generateRandomTitle,"$titles = @('Mr.', 'Ms.', 'Mrs.', 'Dr.', 'Prof.'); $titles | Get-Random"
generateRandomUsername,"$username = -join (65..90 | Get-Random -Count 1 | % {[char]$_}); $username += -join (97..122 | Get-Random -Count 6 | % {[char]$_})"
generateRandomVehicleModel,"$models = @('Ford Mustang', 'Chevrolet Camaro', 'Dodge Charger', 'Tesla Model S', 'BMW 3 Series'); $models | Get-Random"
generateRandomUsernameWithNumber,"'{0}{1}' -f ('a'..'z' | Get-Random -Count 6 -Join ''), (Get-Random -Minimum 10 -Maximum 99)"
generateRandomStateCode,"$stateCodes = @('AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA'); $stateCodes | Get-Random"
generateRandomSocialMediaHandle,"'@{0}' -f ('a'..'z' | Get-Random -Count 8 -Join '')"
generateRandomLatinText,"$latinWords = @('Lorem', 'ipsum', 'dolor', 'sit', 'amet', 'consectetur', 'adipiscing', 'elit'); -join ($latinWords | Get-Random -Count 10)"
generateRandomCompanyEmail,"$companies = @('examplecorp', 'techfirm', 'servicesco'); $domains = @('com', 'net', 'org'); \"$((65..90 + 97..122 | Get-Random -Count 6 | % {[char]$_}) -join '')@$($companies | Get-Random).$($domains | Get-Random)\""
generateRandomCreditCardExpiry,"'{0:00}/{1:00}' -f (Get-Random -Minimum 1 -Maximum 12), (Get-Random -Minimum 22 -Maximum 30)"
generateRandomCsvRecord,"$fields = @('ID', 'Name', 'Age', 'Email'); $values = @((Get-Random -Minimum 1 -Maximum 1000), ('A'..'Z' | Get-Random -Count 6 -Join ''), (Get-Random -Minimum 18 -Maximum 65), ('a'..'z' | Get-Random -Count 6 -Join '') + '@example.com'); -join $values -join ','"
generateRandomAge,"Get-Random -Minimum 18 -Maximum 90"
generateRandomBinaryString,"-join ((0..1) | Get-Random -Count 8 | % {[char]$_})"
generateRandomSocialSecurityNumber,"'{0:D3}-{1:D2}-{2:D4}' -f (Get-Random -Minimum 100 -Maximum 999), (Get-Random -Minimum 10 -Maximum 99), (Get-Random -Minimum 1000 -Maximum 9999)"
generateRandomIPv6Address,"'{0:X}:{1:X}:{2:X}:{3:X}:{4:X}:{5:X}:{6:X}:{7:X}' -f (Get-Random -Minimum 0 -Maximum 65535), (Get-Random -Minimum 0 -Maximum 65535), (Get-Random -Minimum 0 -Maximum 65535), (Get-Random -Minimum 0 -Maximum 65535), (Get-Random -Minimum 0 -Maximum 65535), (Get-Random -Minimum 0 -Maximum 65535), (Get-Random -Minimum 0 -Maximum 65535), (Get-Random -Minimum 0 -Maximum 65535)"
generateRandomISBN,"'978-{0}-{1}-{2}-{3}' -f (Get-Random -Minimum 1 -Maximum 9), (Get-Random -Minimum 100 -Maximum 999), (Get-Random -Minimum 1000 -Maximum 9999), (Get-Random -Minimum 1 -Maximum 9)"
generateRandomTemperature,"'{0:N1}°F' -f (Get-Random -Minimum -30 -Maximum 120)"
generateRandomWeight,"'{0:N1} kg' -f (Get-Random -Minimum 50 -Maximum 200)"
generateRandomHeight,"'{0:N1} cm' -f (Get-Random -Minimum 150 -Maximum 200)"
generateRandomSalary,"'$' + [math]::Round((Get-Random -Minimum 30000 -Maximum 150000), -3)"
generateRandomDomainName,"$domains = @('example.com', 'testsite.org', 'demo.net'); $domains | Get-Random"
generateRandomIPv4Subnet,"'{0}.{1}.{2}.{3}/24' -f (Get-Random -Minimum 1 -Maximum 255), (Get-Random -Minimum 1 -Maximum 255), (Get-Random -Minimum 1 -Maximum 255), 0"
generateRandomUsernameLength10,"-join ((48..57) + (65..90) + (97..122) | Get-Random -Count 10 | % {[char]$_})"
generateRandomAlphanumericPassword,"-join ((48..57) + (65..90) + (97..122) | Get-Random -Count 12 | % {[char]$_})"
generateRandomBooleanValue,"$values = @($true, $false); $values | Get-Random"
generateRandomGeoCoordinates,"'{0:N6}, {1:N6}' -f ((Get-Random -Minimum -90 -Maximum 90) + (Get-Random)), ((Get-Random -Minimum -180 -Maximum 180) + (Get-Random))"
generateRandomEmployeeID,"'{0:D3}-{1:D3}' -f (Get-Random -Minimum 100 -Maximum 999), (Get-Random -Minimum 100 -Maximum 999)"
generateRandomLongitude,"'{0:N6}' -f ((Get-Random -Minimum -180 -Maximum 180) + (Get-Random))"
generateRandomLatitude,"'{0:N6}' -f ((Get-Random -Minimum -90 -Maximum 90) + (Get-Random))"
generateRandomHexadecimalNumber,"'{0:X}' -f (Get-Random -Minimum 0 -Maximum 65535)"
generateRandomBankRoutingNumber,"'{0:D9}' -f (Get-Random -Minimum 0 -Maximum 999999999)"
generateRandomScientificNotation,"'{0}E{1}' -f (Get-Random -Minimum 1 -Maximum 9), (Get-Random -Minimum 1 -Maximum 99)"
generateRandomCurrency,"$currencies = @('$', '€', '£', '¥', '₹'); $currencies | Get-Random"
generateRandomDecimalValue,"'{0:N2}' -f (Get-Random -Minimum 0 -Maximum 10000)"
generateRandomStockTickerSymbol,"-join ((65..90) | Get-Random -Count 4 | % {[char]$_})"
generateRandomMoodEmoji,"$emojis = @('😊', '😢', '😎', '😂', '😡'); $emojis | Get-Random"
generateRandomProverb,"$proverbs = @('Actions speak louder than words.', 'A picture is worth a thousand words.', 'The early bird catches the worm.', 'Better late than never.'); $proverbs | Get-Random"
generateRandomStarRating,"'{0:N1} stars' -f (Get-Random -Minimum 0 -Maximum 5)"
generateRandomPetName,"$petNames = @('Buddy', 'Bella', 'Charlie', 'Luna', 'Max'); $petNames | Get-Random"
generateRandomCookingRecipeTitle,"$recipes = @('Spaghetti Bolognese', 'Chicken Curry', 'Vegetable Stir Fry', 'Beef Tacos', 'Fish and Chips'); $recipes | Get-Random"
generateRandomISBN13,"'978-{0:D1}-{1:D2}-{2:D6}-{3:D1}' -f (Get-Random -Minimum 1 -Maximum 9), (Get-Random -Minimum 10 -Maximum 99), (Get-Random -Minimum 100000 -Maximum 999999), (Get-Random -Minimum 1 -Maximum 9)"
generateRandomFlightNumber,"'FL{0:D4}' -f (Get-Random -Minimum 1000 -Maximum 9999)"
generateRandomDegree,"'{0}°' -f (Get-Random -Minimum 0 -Maximum 360)"
generateRandomBusinessName,"$businesses = @('Tech Solutions', 'Global Enterprises', 'Innovative Ventures', 'Prime Marketing', 'Synergy Works'); $businesses | Get-Random"
generateRandomEmailDomain,"$domains = @('gmail.com', 'yahoo.com', 'outlook.com', 'mail.com', 'protonmail.com'); $domains | Get-Random"
generateRandomHashtag,"'#' + -join ((97..122) | Get-Random -Count 8 | % {[char]$_})"
generateRandomHashedPassword,"'{0:X}' -f ((Get-Random -Minimum 0 -Maximum [int]::MaxValue))"
generateRandomBinaryCode,"-join ((0..1) | Get-Random -Count 8 | % {[char]$_})"
generateRandomOrdinalNumber,"'{0}th' -f (Get-Random -Minimum 1 -Maximum 100)"
generateRandomAlienSpecies,"$species = @('Klingon', 'Vulcan', 'Wookiee', 'Asgardian', 'Martian'); $species | Get-Random"

