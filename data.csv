command,script
listFiles,"Get-ChildItem"
listFilesRecursively,"Get-ChildItem -Recurse"
findProcess,"Get-Process"
stopProcess,"Stop-Process -Name 'processName'"
getService,"Get-Service"
startService,"Start-Service -Name 'serviceName'"
stopService,"Stop-Service -Name 'serviceName'"
restartService,"Restart-Service -Name 'serviceName'"
listDrives,"Get-PSDrive"
getEventLogs,"Get-EventLog -LogName 'System'"
getUptime,"(Get-CimInstance Win32_OperatingSystem).LastBootUpTime"
checkPort,"Test-NetConnection -ComputerName 'localhost' -Port 80"
downloadFile,"Invoke-WebRequest -Uri 'http://example.com/file.txt' -OutFile 'C:\\file.txt'"
getDiskUsage,"Get-WmiObject Win32_LogicalDisk"
getMemoryUsage,"Get-WmiObject Win32_OperatingSystem | Select-Object TotalVisibleMemorySize,FreePhysicalMemory"
getCpuUsage,"Get-WmiObject Win32_Processor | Measure-Object -Property LoadPercentage -Average"
pingServer,"Test-Connection -ComputerName 'google.com'"
getEnvVariables,"Get-ChildItem Env:"
setEnvVariable,"[System.Environment]::SetEnvironmentVariable('variableName','value')"
clearEnvVariable,"[System.Environment]::SetEnvironmentVariable('variableName',$null)"
checkNetwork,"Get-NetIPAddress"
getHotfixes,"Get-HotFix"
listInstalledSoftware,"Get-WmiObject -Class Win32_Product"
getLastBootTime,"(Get-CimInstance Win32_OperatingSystem).LastBootUpTime"
restartComputer,"Restart-Computer"
shutdownComputer,"Stop-Computer"
createNewFile,"New-Item -Path 'C:\\path\\file.txt' -ItemType File"
createNewFolder,"New-Item -Path 'C:\\path\\folder' -ItemType Directory"
deleteFile,"Remove-Item -Path 'C:\\path\\file.txt'"
deleteFolder,"Remove-Item -Path 'C:\\path\\folder' -Recurse"
copyFile,"Copy-Item -Path 'C:\\source\\file.txt' -Destination 'C:\\destination'"
moveFile,"Move-Item -Path 'C:\\source\\file.txt' -Destination 'C:\\destination'"
renameFile,"Rename-Item -Path 'C:\\path\\oldname.txt' -NewName 'newname.txt'"
setExecutionPolicy,"Set-ExecutionPolicy RemoteSigned"
getExecutionPolicy,"Get-ExecutionPolicy"
listScheduledTasks,"Get-ScheduledTask"
createScheduledTask,"New-ScheduledTaskTrigger -At 3am -Daily | Register-ScheduledTask -Action 'C:\\path\\script.ps1' -TaskName 'MyTask'"
runScheduledTask,"Start-ScheduledTask -TaskName 'MyTask'"
getUserSessions,"Get-Process -IncludeUserName | Select-Object UserName,ProcessName,ID"
findTextInFiles,"Select-String -Path 'C:\\path\\*.*' -Pattern 'textToFind'"
enableFirewall,"Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True"
disableFirewall,"Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False"
listFirewallRules,"Get-NetFirewallRule"
addFirewallRule,"New-NetFirewallRule -DisplayName 'Allow HTTP' -Direction Inbound -LocalPort 80 -Protocol TCP -Action Allow"
removeFirewallRule,"Remove-NetFirewallRule -DisplayName 'Allow HTTP'"
checkPowerPlan,"Get-WmiObject -Class Win32_PowerPlan | Where-Object { $_.IsActive -eq 'True' }"
setPowerPlan,"powercfg /setactive scheme_max"
getIpAddress,"(Get-NetIPAddress -AddressFamily IPv4).IPAddress"
setIpAddress,"New-NetIPAddress -InterfaceAlias 'Ethernet' -IPAddress '192.168.1.100' -PrefixLength 24 -DefaultGateway '192.168.1.1'"
flushDns,"Clear-DnsClientCache"
getDnsCache,"Get-DnsClientCache"
addDnsEntry,"Add-DnsClientNrptRule -Namespace 'example.com' -NameServers '192.168.1.1'"
removeDnsEntry,"Remove-DnsClientNrptRule -Namespace 'example.com'"
backupRegistry,"reg export HKLM\\Software\\MyApp C:\\backup\\myapp.reg"
restoreRegistry,"reg import C:\\backup\\myapp.reg"
enableRemoteDesktop,"Set-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server' -Name 'fDenyTSConnections' -Value 0"
disableRemoteDesktop,"Set-ItemProperty -Path 'HKLM:\\System\\CurrentControlSet\\Control\\Terminal Server' -Name 'fDenyTSConnections' -Value 1"
getScheduledTaskInfo,"Get-ScheduledTaskInfo -TaskName 'MyTask'"
removeScheduledTask,"Unregister-ScheduledTask -TaskName 'MyTask' -Confirm:$false"
getBiosInfo,"Get-WmiObject -Class Win32_BIOS"
getSystemInfo,"Get-WmiObject -Class Win32_ComputerSystem"
getNetworkAdapter,"Get-NetAdapter"
enableNetworkAdapter,"Enable-NetAdapter -Name 'Ethernet'"
disableNetworkAdapter,"Disable-NetAdapter -Name 'Ethernet'"
resetNetworkAdapter,"Reset-NetAdapter -Name 'Ethernet'"
listShares,"Get-SmbShare"
createShare,"New-SmbShare -Name 'MyShare' -Path 'C:\\SharedFolder' -FullAccess 'Everyone'"
removeShare,"Remove-SmbShare -Name 'MyShare'"
getUserProfiles,"Get-WmiObject -Class Win32_UserProfile"
deleteUserProfile,"Remove-Item -Path 'C:\\Users\\username' -Recurse"
getGroupMembers,"Get-LocalGroupMember -Group 'Administrators'"
addUserToGroup,"Add-LocalGroupMember -Group 'Administrators' -Member 'username'"
removeUserFromGroup,"Remove-LocalGroupMember -Group 'Administrators' -Member 'username'"
createNewUser,"New-LocalUser -Name 'newuser' -Password (ConvertTo-SecureString 'password' -AsPlainText -Force)"
deleteUser,"Remove-LocalUser -Name 'newuser'"
lockWorkstation,"rundll32.exe user32.dll, LockWorkStation"
logoffUser,"shutdown.exe /l"
getPrinterList,"Get-Printer"
addPrinter,"Add-Printer -Name 'MyPrinter' -DriverName 'DriverName' -PortName 'PortName'"
removePrinter,"Remove-Printer -Name 'MyPrinter'"
getClipboardText,"Get-Clipboard"
setClipboardText,"Set-Clipboard -Value 'TextToCopy'"
getSystemDateTime,"Get-Date"
setSystemDateTime,"Set-Date -Date '2024-12-31 10:00'"
listNetworkProfiles,"Get-NetConnectionProfile"
setNetworkProfile,"Set-NetConnectionProfile -InterfaceAlias 'Ethernet' -NetworkCategory Private"
getCpuInfo,"Get-CimInstance -ClassName Win32_Processor"
getGpuInfo,"Get-CimInstance -ClassName Win32_VideoController"
checkPendingReboot,"Get-ItemProperty -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Auto Update\\RebootRequired'"
getUpdates,"Get-WindowsUpdateLog"
installWindowsFeature,"Install-WindowsFeature -Name Web-Server"
removeWindowsFeature,"Uninstall-WindowsFeature -Name Web-Server"
getScheduledJobs,"Get-ScheduledJob"
registerScheduledJob,"Register-ScheduledJob -Name 'MyJob' -ScriptBlock { Get-Process }"
unregisterScheduledJob,"Unregister-ScheduledJob -Name 'MyJob'"
exportScheduledJobs,"Export-ScheduledJob -Name 'MyJob' -OutputFile 'C:\\jobs.xml'"
importScheduledJobs,"Import-ScheduledJob -Path 'C:\\jobs.xml'"
getRemoteDesktopUsers,"qwinsta /server:localhost"
logoffRemoteDesktopUser,"logoff /server:localhost 1"
listEventLogs,"Get-EventLog -LogName * | Select-Object -Unique Log"
exportEventLog,"Export-EventLog -LogName System -Path 'C:\\logs\\system.evtx'"
importCsv,"Import-Csv -Path 'C:\\path\\file.csv'"
exportCsv,"Get-Process | Export-Csv -Path 'C:\\path\\processes.csv'"
importXml,"[xml](Get-Content 'C:\\path\\file.xml')"
exportXml,"$xmlData.Save('C:\\path\\file.xml')"
getRegistryKey,"Get-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run'"
setRegistryKey,"Set-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' -Name 'MyApp' -Value 'C:\\MyApp\\MyApp.exe'"
removeRegistryKey,"Remove-ItemProperty -Path 'HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run' -Name 'MyApp'"
getFileHash,"Get-FileHash -Path 'C:\\path\\file.txt'"
compressFile,"Compress-Archive -Path 'C:\\path\\file.txt' -DestinationPath 'C:\\path\\file.zip'"
decompressFile,"Expand-Archive -Path 'C:\\path\\file.zip' -DestinationPath 'C:\\path\\'"
listEnvironmentVariables,"[System.Environment]::GetEnvironmentVariables()"
createNewVariable,"New-Variable -Name 'MyVariable' -Value 'HelloWorld'"
removeVariable,"Remove-Variable -Name 'MyVariable'"
startProcess,"Start-Process 'notepad.exe'"
stopServiceByName,"Stop-Service -DisplayName 'MyService'"
getSystemLocale,"Get-WinSystemLocale"
setSystemLocale,"Set-WinSystemLocale -SystemLocale 'en-US'"
getTimezone,"Get-TimeZone"
setTimezone,"Set-TimeZone -Name 'Pacific Standard Time'"
getUserSID,"Get-WmiObject -Class Win32_UserAccount | Where-Object { $_.Name -eq 'username' } | Select-Object SID"
convertToJson,"ConvertTo-Json -InputObject @{'Key'='Value'}"
convertFromJson,"ConvertFrom-Json -InputObject '{\"Key\":\"Value\"}'"
getHostname,"$env:COMPUTERNAME"
getUsername,"$env:USERNAME"
getSystemArchitecture,"(Get-WmiObject -Class Win32_OperatingSystem).OSArchitecture"
getOsVersion,"(Get-WmiObject -Class Win32_OperatingSystem).Version"
getEventLogEntries,"Get-EventLog -LogName Application -Newest 10"
clearEventLog,"Clear-EventLog -LogName Application"
getStartupPrograms,"Get-CimInstance -ClassName Win32_StartupCommand"
enableStartupProgram,"Enable-ScheduledTask -TaskName 'ProgramName'"
disableStartupProgram,"Disable-ScheduledTask -TaskName 'ProgramName'"
sendEmail,"Send-MailMessage -From 'user@example.com' -To 'recipient@example.com' -Subject 'Test Email' -Body 'This is a test.' -SmtpServer 'smtp.example.com'"
getErrorLog,"Get-EventLog -LogName Application -EntryType Error"
getWarningLog,"Get-EventLog -LogName Application -EntryType Warning"
getInfoLog,"Get-EventLog -LogName Application -EntryType Information"
testConnection,"Test-NetConnection -ComputerName 'example.com'"
setNetworkAdapterProperty,"Set-NetAdapterAdvancedProperty -Name 'Ethernet' -DisplayName 'Jumbo Packet' -DisplayValue '9014 Bytes'"
resetNetworkStack,"netsh int ip reset"
releaseDhcpLease,"ipconfig /release"
renewDhcpLease,"ipconfig /renew"
displayNetworkConnections,"netstat -ano"
viewRoutingTable,"route print"
enableProxy,"netsh winhttp set proxy proxy-server='http=myproxy:80;https=myproxy:443'"
disableProxy,"netsh winhttp reset proxy"
getVolumeShadowCopy,"vssadmin list shadows"
createVolumeShadowCopy,"vssadmin create shadow /For=C:"
deleteVolumeShadowCopy,"vssadmin delete shadows /For=C:"
getPowershellVersion,"$PSVersionTable.PSVersion"
updateHelp,"Update-Help -Module * -Force"
getFilePermissions,"Get-Acl -Path 'C:\\path\\file.txt'"
setFilePermissions,"Set-Acl -Path 'C:\\path\\file.txt' -AclObject $acl"
getRemoteSessions,"query user"
startRemoteSession,"Enter-PSSession -ComputerName 'RemotePC'"
stopRemoteSession,"Exit-PSSession"
invokeRemoteCommand,"Invoke-Command -ComputerName 'RemotePC' -ScriptBlock { Get-Process }"
setTimeZoneDynamic,"Set-TimeZone -Name (tzutil /g)"
getEventLogSources,"Get-EventLog -LogName Application | Select-Object Source -Unique"
addScheduledTaskTrigger,"New-ScheduledTaskTrigger -AtStartup"
getProcessOwner,"Get-WmiObject Win32_Process | ForEach-Object { $_.GetOwner().User }"
restartNetworkInterface,"Disable-NetAdapter -Name 'Ethernet'; Enable-NetAdapter -Name 'Ethernet'"
getConnectedUsbDevices,"Get-WmiObject -Query 'Select * From Win32_USBControllerDevice'"
mountIso,"Mount-DiskImage -ImagePath 'C:\\path\\image.iso'"
unmountIso,"Dismount-DiskImage -ImagePath 'C:\\path\\image.iso'"
selectObject,"Get-Process | Select-Object Name,Id,CPU"
whereObject,"Get-Process | Where-Object { $_.CPU -gt 100 }"
sortObject,"Get-Process | Sort-Object CPU -Descending"
groupObject,"Get-Process | Group-Object -Property ProcessName"
measureObject,"Get-ChildItem | Measure-Object -Property Length -Sum"
foreachObject,"Get-Process | ForEach-Object { $_.Name }"
formatTable,"Get-Process | Format-Table -Property Name,Id,CPU"
formatList,"Get-Process | Format-List -Property Name,Id,CPU"
outString,"Get-Process | Out-String"
convertToCsv,"Get-Process | Select-Object Name,Id,CPU | ConvertTo-Csv"
convertFromCsv,"Import-Csv -Path 'C:\\path\\file.csv' | ConvertFrom-Csv"
convertToHtml,"Get-Process | ConvertTo-Html -Property Name,Id,CPU"
convertFromHtml,"(Get-Content 'C:\\path\\file.html') -join '' | ConvertFrom-Html"
convertToXml,"Get-Process | ConvertTo-Xml"
convertFromXml,"[xml](Get-Content 'C:\\path\\file.xml')"
convertToJson,"Get-Process | ConvertTo-Json"
convertFromJson,"Get-Content 'C:\\path\\file.json' | ConvertFrom-Json"
selectString,"Select-String -Path 'C:\\path\\file.txt' -Pattern 'error'"
addMember,"$obj = New-Object PSObject; $obj | Add-Member -MemberType NoteProperty -Name 'Name' -Value 'John Doe'"
addContent,"Add-Content -Path 'C:\\path\\file.txt' -Value 'New content'"
setContent,"Set-Content -Path 'C:\\path\\file.txt' -Value 'Overwrite content'"
joinPath,"Join-Path -Path 'C:\\path' -ChildPath 'file.txt'"
splitPath,"Split-Path -Path 'C:\\path\\file.txt' -Leaf"
testPath,"Test-Path -Path 'C:\\path\\file.txt'"
compareObject,"Compare-Object -ReferenceObject (Get-Content 'C:\\path\\file1.txt') -DifferenceObject (Get-Content 'C:\\path\\file2.txt')"
mergeCsv,"Import-Csv 'C:\\path\\file1.csv' | Select-Object * | Export-Csv 'C:\\path\\merged.csv' -NoTypeInformation"
removeDuplicateLines,"Get-Content 'C:\\path\\file.txt' | Sort-Object | Get-Unique | Set-Content 'C:\\path\\unique.txt'"
countLines,"(Get-Content 'C:\\path\\file.txt').Count"
filterCsv,"Import-Csv 'C:\\path\\file.csv' | Where-Object { $_.ColumnName -eq 'Value' }"
createHashtable,"$hashTable = @{}; $hashTable['Key'] = 'Value'"
iterateHashtable,"$hashTable.GetEnumerator() | ForEach-Object { Write-Host $_.Key $_.Value }"
updateHashtable,"$hashTable['Key'] = 'NewValue'"
deleteHashtableKey,"$hashTable.Remove('Key')"
exportJson,"Get-Process | ConvertTo-Json | Set-Content -Path 'C:\\path\\file.json'"
filterJson,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $json | Where-Object { $_.Property -eq 'Value' }"
joinCsvColumns,"Import-Csv 'C:\\path\\file.csv' | Select-Object *,@{Name='FullName';Expression={$_.'FirstName' + ' ' + $_.'LastName'}}"
transposeCsv,"Import-Csv 'C:\\path\\file.csv' | ConvertTo-Json | ConvertFrom-Json | ForEach-Object { $_.PSObject.Properties | ForEach-Object { $_.Name } }"
extractSubstring,"'HelloWorld'.Substring(0,5)"
splitString,"'one,two,three' -split ','"
joinStrings,"$array = @('one','two','three'); $array -join ','"
replaceString,"(Get-Content 'C:\\path\\file.txt') -replace 'oldText', 'newText' | Set-Content 'C:\\path\\file.txt'"
addCsvColumn,"Import-Csv 'C:\\path\\file.csv' | ForEach-Object { $_ | Add-Member -NotePropertyName 'NewColumn' -NotePropertyValue 'NewValue'; $_ } | Export-Csv 'C:\\path\\file.csv' -NoTypeInformation"
removeCsvColumn,"Import-Csv 'C:\\path\\file.csv' | Select-Object -ExcludeProperty 'ColumnToRemove' | Export-Csv 'C:\\path\\file.csv' -NoTypeInformation"
trimWhitespace,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_.Trim() } | Set-Content 'C:\\path\\file.txt'"
convertToUpperCase,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_.ToUpper() } | Set-Content 'C:\\path\\file.txt'"
convertToLowerCase,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_.ToLower() } | Set-Content 'C:\\path\\file.txt'"
getSubstring,"'Hello World'.Substring(0,5)"
splitCsvIntoFiles,"$csv = Import-Csv 'C:\\path\\file.csv'; $i=0; $csv | Group-Object ColumnName | ForEach-Object { $_.Group | Export-Csv ('C:\\path\\split'+$i+'.csv') -NoTypeInformation; $i++ }"
getCsvColumnNames,"(Import-Csv 'C:\\path\\file.csv')[0].PSObject.Properties.Name"
replaceCsvColumnValues,"Import-Csv 'C:\\path\\file.csv' | ForEach-Object { $_.ColumnName = $_.ColumnName -replace 'OldValue','NewValue'; $_ } | Export-Csv 'C:\\path\\file.csv' -NoTypeInformation"
transposeDataTable,"$data = Import-Csv 'C:\\path\\file.csv'; $cols = $data | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name; $rows = @(); $cols | ForEach-Object { $row = '' | Select-Object -Property 'ColumnName', 'Values'; $row.ColumnName = $_; $row.Values = $data | ForEach-Object { $_.$_ }; $rows += $row }; $rows | Export-Csv 'C:\\path\\transposed.csv' -NoTypeInformation"
pivotDataTable,"$data = Import-Csv 'C:\\path\\file.csv'; $pivot = $data | Group-Object ColumnToGroup -AsHashTable; $pivot.GetEnumerator() | ForEach-Object { [PSCustomObject]@{'Group' = $_.Key; 'Values' = ($_.Value | Measure-Object -Property ColumnToAggregate -Sum).Sum} } | Export-Csv 'C:\\path\\pivot.csv' -NoTypeInformation"
removeEmptyLines,"Get-Content 'C:\\path\\file.txt' | Where-Object { $_ -ne '' } | Set-Content 'C:\\path\\file.txt'"
reverseLines,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ } | Sort-Object { [int]$_ } -Descending | Set-Content 'C:\\path\\file.txt'"
expandProperty,"Get-Process | Select-Object -ExpandProperty Name"
combineCsvFiles,"$files = Get-ChildItem 'C:\\path\\' -Filter '*.csv'; $combined = foreach ($file in $files) { Import-Csv $file }; $combined | Export-Csv 'C:\\path\\combined.csv' -NoTypeInformation"
convertToMarkdown,"Get-Process | Select-Object Name,Id,CPU | ConvertTo-MarkdownTable"
calculateExpression,"[math]::Pow(2, 3)"
filterByDate,"Get-ChildItem -Path 'C:\\path\\' | Where-Object { $_.LastWriteTime -ge (Get-Date).AddDays(-7) }"
findLongestLine,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_.Length } | Measure-Object -Maximum"
findShortestLine,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_.Length } | Measure-Object -Minimum"
getRandomLine,"Get-Content 'C:\\path\\file.txt' | Get-Random"
convertToTitleCase,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_.Substring(0,1).ToUpper() + $_.Substring(1).ToLower() } | Set-Content 'C:\\path\\file.txt'"
generateRange,"1..10 | ForEach-Object { $_ }"
mergeJsonObjects,"$json1 = Get-Content 'C:\\path\\file1.json' | ConvertFrom-Json; $json2 = Get-Content 'C:\\path\\file2.json' | ConvertFrom-Json; [PSCustomObject]@{ Prop1 = $json1.Prop1; Prop2 = $json2.Prop2 } | ConvertTo-Json"
sortJsonArray,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $sorted = $json | Sort-Object PropertyName; $sorted | ConvertTo-Json | Set-Content 'C:\\path\\sorted.json'"
calculateCsvColumn,"Import-Csv 'C:\\path\\file.csv' | ForEach-Object { $_ | Add-Member -MemberType NoteProperty -Name 'Total' -Value ([int]$_.Column1 + [int]$_.Column2) -Force; $_ } | Export-Csv 'C:\\path\\file.csv' -NoTypeInformation"
splitTextByDelimiter,"'one,two,three' -split ','"
concatenateFiles,"Get-Content 'C:\\path\\file1.txt','C:\\path\\file2.txt' | Set-Content 'C:\\path\\combined.txt'"
compareStrings,"if ('string1' -eq 'string2') { 'Strings are equal' } else { 'Strings are not equal' }"
roundNumbers,"[math]::Round(3.14159, 2)"
transposeJsonArray,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $keys = $json[0].PSObject.Properties.Name; $keys | ForEach-Object { $key = $_; [PSCustomObject]@{ Key = $key; Values = $json | ForEach-Object { $_.$key } } } | ConvertTo-Json | Set-Content 'C:\\path\\transposed.json'"
convertCsvToXlsx,"$excel = New-Object -ComObject Excel.Application; $workbook = $excel.Workbooks.Open('C:\\path\\file.csv'); $workbook.SaveAs('C:\\path\\file.xlsx',51); $excel.Quit()"
filterDataTable,"$data = Import-Csv 'C:\\path\\file.csv'; $filtered = $data | Where-Object { $_.ColumnName -eq 'Value' }; $filtered | Export-Csv 'C:\\path\\filtered.csv' -NoTypeInformation"
convertJsonToCsv,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $json | ConvertTo-Csv | Set-Content 'C:\\path\\file.csv'"
filterJsonArray,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $filtered = $json | Where-Object { $_.Property -eq 'Value' }; $filtered | ConvertTo-Json | Set-Content 'C:\\path\\filtered.json'"
sortCsvRows,"Import-Csv 'C:\\path\\file.csv' | Sort-Object ColumnName | Export-Csv 'C:\\path\\sorted.csv' -NoTypeInformation"
removeSpecialCharacters,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ -replace '[^a-zA-Z0-9]', '' } | Set-Content 'C:\\path\\clean.txt'"
generateRandomNumbers,"1..10 | ForEach-Object { Get-Random -Minimum 1 -Maximum 100 }"
createCsvFromObjects,"$data = @(); $data += [PSCustomObject]@{Column1='Value1';Column2='Value2'}; $data | Export-Csv 'C:\\path\\file.csv' -NoTypeInformation"
calculateAverage,"Import-Csv 'C:\\path\\file.csv' | Measure-Object -Property 'ColumnName' -Average"
findMaxValue,"Import-Csv 'C:\\path\\file.csv' | Measure-Object -Property 'ColumnName' -Maximum"
findMinValue,"Import-Csv 'C:\\path\\file.csv' | Measure-Object -Property 'ColumnName' -Minimum"
calculateSum,"Import-Csv 'C:\\path\\file.csv' | Measure-Object -Property 'ColumnName' -Sum"
flattenArray,"$array = @(1, @(2, 3), @(4, @(5, 6))); $flattened = $array -replace '[@()]', ''"
removeArrayDuplicates,"$array = @(1, 2, 2, 3, 4, 4, 5); $uniqueArray = $array | Sort-Object -Unique"
findArrayIntersection,"Compare-Object -ReferenceObject @(1, 2, 3) -DifferenceObject @(2, 3, 4) -IncludeEqual | Where-Object { $_.SideIndicator -eq '==' } | ForEach-Object { $_.InputObject }"
calculateStandardDeviation,"$values = 1..10; $average = ($values | Measure-Object -Average).Average; $squaredDifferences = $values | ForEach-Object { [math]::Pow($_ - $average, 2) }; [math]::Sqrt(($squaredDifferences | Measure-Object -Sum).Sum / $squaredDifferences.Length)"
transposeCsvColumns,"Import-Csv 'C:\\path\\file.csv' | Select-Object Column1,Column2 | Export-Csv 'C:\\path\\transposed.csv' -NoTypeInformation"
splitStringIntoChunks,"$string = 'abcdefghij'; $chunkSize = 2; -join ($string -split '(.{' + $chunkSize + '})' -ne '')"
extractEmails,"Get-Content 'C:\\path\\file.txt' | Select-String -Pattern '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b' -AllMatches | ForEach-Object { $_.Matches.Value }"
extractUrls,"Get-Content 'C:\\path\\file.txt' | Select-String -Pattern '(https?|ftp)://[^\s/$.?#].[^\s]*' -AllMatches | ForEach-Object { $_.Matches.Value }"
convertToBase64,"[Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes('Hello World'))"
convertFromBase64,"[Text.Encoding]::UTF8.GetString([Convert]::FromBase64String('SGVsbG8gV29ybGQ='))"
hashString,"'Hello World' | ForEach-Object { [BitConverter]::ToString([System.Security.Cryptography.HashAlgorithm]::Create('SHA256').ComputeHash([System.Text.Encoding]::UTF8.GetBytes($_))) -replace '-', '' }"
splitArrayIntoBatches,"$array = 1..10; $batchSize = 3; $array | ForEach-Object -Begin { $i = 0 } -Process { $group = [math]::Floor($i++ / $batchSize); if (-not $groups[$group]) { $groups[$group] = @() }; $groups[$group] += $_ } -End { $groups }"
replaceCsvDelimiter,"(Get-Content 'C:\\path\\file.csv') -replace ',', ';' | Set-Content 'C:\\path\\file.csv'"
normalizeWhitespace,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ -replace '\s+', ' ' } | Set-Content 'C:\\path\\file.txt'"
splitCsvRowsByValue,"Import-Csv 'C:\\path\\file.csv' | Group-Object -Property 'ColumnName' | ForEach-Object { $_.Group | Export-Csv ('C:\\path\\file_'+$_.Name+'.csv') -NoTypeInformation }"
generateDataMatrix,"1..10 | ForEach-Object { $row = 1..10 | ForEach-Object { Get-Random -Minimum 0 -Maximum 100 }; $row -join ',' } | Out-File 'C:\\path\\matrix.csv'"
parseIniFile,"Get-Content 'C:\\path\\file.ini' | ForEach-Object { if ($_ -match '^\[(.+)\]$') { $section = $matches[1] } elseif ($_ -match '(.+)=(.+)') { New-Object PSObject -Property @{ Section = $section; Key = $matches[1].Trim(); Value = $matches[2].Trim() } } }"
mergeIniFiles,"$files = Get-ChildItem 'C:\\path\\' -Filter '*.ini'; $ini = @{}; $files | ForEach-Object { $section = ''; Get-Content $_.FullName | ForEach-Object { if ($_ -match '^\[(.+)\]$') { $section = $matches[1]; if (-not $ini[$section]) { $ini[$section] = @{} } } elseif ($_ -match '(.+)=(.+)') { $ini[$section][$matches[1].Trim()] = $matches[2].Trim() } } }; $ini | Export-Csv 'C:\\path\\merged.ini' -NoTypeInformation"
removeLinesByKeyword,"Get-Content 'C:\\path\\file.txt' | Where-Object { $_ -notmatch 'Keyword' } | Set-Content 'C:\\path\\filtered.txt'"
replaceJsonValues,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $json | ForEach-Object { $_.Property = $_.Property -replace 'OldValue','NewValue' }; $json | ConvertTo-Json | Set-Content 'C:\\path\\file.json'"
filterByRegex,"Get-Content 'C:\\path\\file.txt' | Where-Object { $_ -match '^\d{3}-\d{2}-\d{4}$' } | Set-Content 'C:\\path\\filtered.txt'"
unescapeJsonString,"$json = '\"Hello\\nWorld\"'; [System.Web.HttpUtility]::HtmlDecode($json)"
escapeJsonString,"$string = 'Hello\nWorld'; [System.Web.HttpUtility]::HtmlEncode($string)"
convertCsvToJson,"Import-Csv 'C:\\path\\file.csv' | ConvertTo-Json | Set-Content 'C:\\path\\file.json'"
calculateCsvColumnDifference,"Import-Csv 'C:\\path\\file.csv' | ForEach-Object { $_ | Add-Member -MemberType NoteProperty -Name 'Difference' -Value ([int]$_.Column1 - [int]$_.Column2) -Force; $_ } | Export-Csv 'C:\\path\\file.csv' -NoTypeInformation"
generateCsvTemplate,"1..10 | ForEach-Object { $i = $_; $props = @(); 1..5 | ForEach-Object { $props += 'Column'+$_ }; [PSCustomObject]@{ Column1 = $i; Column2 = 'Value'+$i; Column3 = 'Value'+$i; Column4 = 'Value'+$i; Column5 = 'Value'+$i } } | Export-Csv 'C:\\path\\template.csv' -NoTypeInformation"
createPivotTable,"$data = Import-Csv 'C:\\path\\file.csv'; $pivot = $data | Group-Object ColumnToGroup | ForEach-Object { $_.Group | Measure-Object ColumnToAggregate -Sum } | Select-Object @{Name='Group';Expression={$_.Group}}, @{Name='Total';Expression={$_.Sum}}; $pivot | Export-Csv 'C:\\path\\pivot.csv' -NoTypeInformation"
replaceMultipleStrings,"(Get-Content 'C:\\path\\file.txt') -replace 'old1','new1' -replace 'old2','new2' | Set-Content 'C:\\path\\file.txt'"
convertArrayToHashtable,"$array = @(@('Key1','Value1'),@('Key2','Value2')); $hashtable = @{}; $array | ForEach-Object { $hashtable[$_[0]] = $_[1] }"
stripHtmlTags,"Get-Content 'C:\\path\\file.html' | ForEach-Object { $_ -replace '<[^>]+>','' } | Set-Content 'C:\\path\\plain.txt'"
getUniqueWords,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ -split '\W+' } | Sort-Object -Unique"
tokenizeText,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ -split '\s+' }"
generateRandomString,"-join ((65..90) + (97..122) + (48..57) | Get-Random -Count 8 | % {[char]$_})"
padString,"'123'.PadLeft(5,'0')"
calculateStringLength,"'Hello World'.Length"
trimSpecialCharacters,"'Hello, World!' -replace '[^a-zA-Z0-9 ]',''"
replaceNewlinesWithSpaces,"(Get-Content 'C:\\path\\file.txt') -replace '\r\n',' ' | Set-Content 'C:\\path\\file.txt'"
filterJsonByKeyValue,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $json | Where-Object { $_.Key -eq 'Value' } | ConvertTo-Json | Set-Content 'C:\\path\\filtered.json'"
renameCsvColumns,"Import-Csv 'C:\\path\\file.csv' | Select-Object @{Name='NewName1';Expression={$_.'OldName1'}}, @{Name='NewName2';Expression={$_.'OldName2'}} | Export-Csv 'C:\\path\\renamed.csv' -NoTypeInformation"
combineJsonFiles,"$json1 = Get-Content 'C:\\path\\file1.json' | ConvertFrom-Json; $json2 = Get-Content 'C:\\path\\file2.json' | ConvertFrom-Json; $combined = $json1 + $json2; $combined | ConvertTo-Json | Set-Content 'C:\\path\\combined.json'"
calculateMedian,"$values = 1..10; $sorted = $values | Sort-Object; $count = $sorted.Count; if ($count % 2 -eq 0) { ($sorted[$count / 2 - 1] + $sorted[$count / 2]) / 2 } else { $sorted[($count - 1) / 2] }"
reverseString,"'Hello World' -split '' | ForEach-Object {$_} | Sort-Object -Descending | ForEach-Object {$_} -join ''"
getCsvRowCount,"(Import-Csv 'C:\\path\\file.csv').Count"
addJsonProperty,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $json | ForEach-Object { $_ | Add-Member -NotePropertyName 'NewProperty' -NotePropertyValue 'NewValue' }; $json | ConvertTo-Json | Set-Content 'C:\\path\\file.json'"
removeJsonProperty,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $json | ForEach-Object { $_.PSObject.Properties.Remove('PropertyToRemove') }; $json | ConvertTo-Json | Set-Content 'C:\\path\\file.json'"
countWordOccurrences,"Get-Content 'C:\\path\\file.txt' | Select-String -Pattern '\\bword\\b' -AllMatches | Measure-Object"
replaceCharacterInString,"'Hello World' -replace 'o', 'a'"
extractNumbersFromString,"'abc123def456' -replace '\D', ''"
findLongestWord,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ -split ' ' } | Sort-Object Length -Descending | Select-Object -First 1"
findShortestWord,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ -split ' ' } | Sort-Object Length | Select-Object -First 1"
createJsonTemplate,"$template = [PSCustomObject]@{ Property1 = ''; Property2 = ''; Property3 = '' }; $template | ConvertTo-Json | Set-Content 'C:\\path\\template.json'"
splitJsonArray,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $split = $json | ForEach-Object { $_ | ConvertTo-Json | Out-File ('C:\\path\\split' + ($json.IndexOf($_) + 1) + '.json') }"
mergeTextFiles,"Get-Content 'C:\\path\\file1.txt','C:\\path\\file2.txt' | Set-Content 'C:\\path\\merged.txt'"
generateXmlFromCsv,"$csv = Import-Csv 'C:\\path\\file.csv'; $xml = New-Object System.Xml.XmlDocument; $root = $xml.CreateElement('Root'); $xml.AppendChild($root); $csv | ForEach-Object { $row = $xml.CreateElement('Row'); $_.PSObject.Properties | ForEach-Object { $field = $xml.CreateElement($_.Name); $field.InnerText = $_.Value; $row.AppendChild($field) }; $root.AppendChild($row) }; $xml.Save('C:\\path\\file.xml')"
convertXmlToJson,"$xml = [xml](Get-Content 'C:\\path\\file.xml'); $json = $xml | ConvertTo-Json; $json | Set-Content 'C:\\path\\file.json'"
sortJsonByKey,"$json = Get-Content 'C:\\path\\file.json' | ConvertFrom-Json; $sorted = $json | Sort-Object -Property Key; $sorted | ConvertTo-Json | Set-Content 'C:\\path\\sorted.json'"
getFileExtension,"'C:\\path\\file.txt' -split '\\.' | Select-Object -Last 1"
mergeCsvColumns,"Import-Csv 'C:\\path\\file.csv' | ForEach-Object { $_ | Add-Member -MemberType NoteProperty -Name 'MergedColumn' -Value ($_.Column1 + ' ' + $_.Column2); $_ } | Export-Csv 'C:\\path\\merged.csv' -NoTypeInformation"
splitStringByWhitespace,"'This is a test string' -split '\s+'"
normalizeCase,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_.ToLower() } | Set-Content 'C:\\path\\file.txt'"
convertCsvToXml,"$csv = Import-Csv 'C:\\path\\file.csv'; $xml = [xml]'<Root/>'; $csv | ForEach-Object { $row = $xml.CreateElement('Row'); $_.PSObject.Properties | ForEach-Object { $node = $xml.CreateElement($_.Name); $node.InnerText = $_.Value; $row.AppendChild($node) }; $xml.Root.AppendChild($row) }; $xml.Save('C:\\path\\file.xml')"
calculateCsvAverage,"Import-Csv 'C:\\path\\file.csv' | Measure-Object -Property 'ColumnName' -Average"
reverseCsvColumns,"Import-Csv 'C:\\path\\file.csv' | ForEach-Object { $_.PSObject.Properties.Reverse() } | Export-Csv 'C:\\path\\reversed.csv' -NoTypeInformation"
calculateMode,"$values = 1,2,2,3,3,3,4,4,5; $values | Group-Object | Sort-Object Count -Descending | Select-Object -First 1 -ExpandProperty Name"
splitTextByLength,"$text = 'abcdefghij'; $length = 2; $chunks = [regex]::Matches($text, '.{1,'+$length+'}').Value"
convertTextToHex,"'Hello World' | ForEach-Object { [System.BitConverter]::ToString([System.Text.Encoding]::UTF8.GetBytes($_)) -replace '-' }"
convertHexToText,"$hex = '48656C6C6F20576F726C64'; -join ($hex -split '(.{2})' | Where-Object { $_ }) | ForEach-Object { [char][byte]('0x' + $_) }"
aggregateCsvData,"Import-Csv 'C:\\path\\file.csv' | Group-Object -Property 'Category' | ForEach-Object { [PSCustomObject]@{ Category = $_.Name; Total = ($_.Group | Measure-Object -Property 'Amount' -Sum).Sum } } | Export-Csv 'C:\\path\\aggregated.csv' -NoTypeInformation"
removeCsvRows,"Import-Csv 'C:\\path\\file.csv' | Where-Object { $_.ColumnName -ne 'ValueToRemove' } | Export-Csv 'C:\\path\\filtered.csv' -NoTypeInformation"
createCsvSummary,"Import-Csv 'C:\\path\\file.csv' | Group-Object -Property 'Category' | ForEach-Object { [PSCustomObject]@{ Category = $_.Name; Count = $_.Count; Total = ($_.Group | Measure-Object -Property 'Amount' -Sum).Sum } } | Export-Csv 'C:\\path\\summary.csv' -NoTypeInformation"
convertTextToBinary,"'Hello' | ForEach-Object { [Convert]::ToString([byte][char]$_, 2).PadLeft(8,'0') }"
convertBinaryToText,"$binary = '01001000 01100101 01101100 01101100 01101111'; -join ($binary -split ' ' | ForEach-Object { [char][convert]::ToInt32($_, 2) })"
shiftStringCharacters,"'abcdef' | ForEach-Object { [string]::Join('', $_[1..($_.Length-1)] + $_[0]) }"
sortLinesAlphabetically,"Get-Content 'C:\\path\\file.txt' | Sort-Object | Set-Content 'C:\\path\\sorted.txt'"
countCharacterOccurrences,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ -split '' | Group-Object | Sort-Object Count -Descending }"
maskSensitiveData,"Get-Content 'C:\\path\\file.txt' | ForEach-Object { $_ -replace '\d{4}-\d{4}-\d{4}-\d{4}', '****-****-****-****' } | Set-Content 'C:\\path\\masked.txt'"
getHtmlContent,"$url = 'https://example.com'; Invoke-WebRequest -Uri $url -UseBasicParsing"
downloadImage,"$url = 'https://example.com/image.jpg'; $output = 'C:\\path\\image.jpg'; Invoke-WebRequest -Uri $url -OutFile $output"
extractHtmlTitle,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.title"
extractHtmlMetaTags,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('meta')"
scrapeHyperlinks,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).Links | Select-Object href"
scrapeTextContent,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.body.innerText"
scrapeTableData,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('table') | ForEach-Object { $_.outerHTML }"
getWebPageHeaders,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).Headers"
downloadFileFromLink,"$url = 'https://example.com/file.zip'; $output = 'C:\\path\\file.zip'; Invoke-WebRequest -Uri $url -OutFile $output"
scrapeImageSources,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('img') | Select-Object src"
followRedirect,"$url = 'https://example.com/redirect'; (Invoke-WebRequest -Uri $url -MaximumRedirection 5 -UseBasicParsing).Headers.Location"
extractHtmlParagraphs,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('p') | Select-Object innerText"
extractHtmlLinksText,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).Links | Select-Object innerText"
parseJsonFromWeb,"$url = 'https://api.example.com/data.json'; (Invoke-WebRequest -Uri $url -UseBasicParsing).Content | ConvertFrom-Json"
scrapeWebPageTitle,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.title"
scrapeFormInputs,"$url = 'https://example.com/form'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('input')"
submitWebForm,"$url = 'https://example.com/form'; $params = @{ 'username'='user'; 'password'='pass' }; Invoke-WebRequest -Uri $url -Method Post -Body $params -UseBasicParsing"
extractH1Tags,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('h1') | Select-Object innerText"
scrapeJsonApi,"$url = 'https://api.example.com/data.json'; (Invoke-WebRequest -Uri $url -UseBasicParsing).Content | ConvertFrom-Json"
extractSpecificHtmlElement,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementById('elementId').innerText"
downloadWebPage,"$url = 'https://example.com'; $output = 'C:\\path\\page.html'; Invoke-WebRequest -Uri $url -OutFile $output"
extractCssClasses,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.body.getElementsByClassName('classname') | Select-Object innerText"
scrapeScriptTags,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('script') | Select-Object src"
extractInlineCss,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('style') | Select-Object innerText"
findBrokenLinks,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).Links | ForEach-Object { if (!(Test-Connection $_.href -Quiet)) { $_.href } }"
scrapeSpecificHtmlTag,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('tagname') | Select-Object innerText"
scrapePageWithAuthentication,"$url = 'https://example.com'; $cred = Get-Credential; Invoke-WebRequest -Uri $url -Credential $cred -UseBasicParsing"
scrapeHtmlTableRows,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('tr') | ForEach-Object { $_.outerHTML }"
downloadCssFiles,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('link') | Where-Object { $_.rel -eq 'stylesheet' } | ForEach-Object { Invoke-WebRequest -Uri $_.href -OutFile ('C:\\path\\' + $_.href.Split('/')[-1]) }"
scrapeHiddenInputs,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('input') | Where-Object { $_.type -eq 'hidden' }"
extractDataAttributes,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.body.querySelectorAll('[data-*]') | ForEach-Object { $_.outerHTML }"
scrapeAllForms,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.forms"
extractAllLinks,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).Links"
scrapePagination,"$url = 'https://example.com/page='; 1..5 | ForEach-Object { Invoke-WebRequest -Uri ($url + $_) -UseBasicParsing }"
extractAnchorLinks,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('a') | Where-Object { $_.href -match '^#' }"
extractDataFromTables,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('table') | ForEach-Object { $_.outerHTML }"
extractWebsiteFavicon,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.querySelector('link[rel=icon]')"
findImagesByAltText,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('img') | Where-Object { $_.alt -match 'alt text' }"
getWebPageStatus,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).StatusCode"
downloadJsFiles,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('script') | Where-Object { $_.src -match '\.js$' } | ForEach-Object { Invoke-WebRequest -Uri $_.src -OutFile ('C:\\path\\' + $_.src.Split('/')[-1]) }"
scrapeJsonFromWebApi,"$url = 'https://api.example.com/data'; Invoke-WebRequest -Uri $url -UseBasicParsing | ConvertFrom-Json"
scrapeContentByXPath,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.SelectNodes('//div[@class=\"example-class\"]') | ForEach-Object { $_.innerText }"
downloadPdfFromUrl,"$url = 'https://example.com/file.pdf'; $output = 'C:\\path\\file.pdf'; Invoke-WebRequest -Uri $url -OutFile $output"
scrapeMetaDescription,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('meta') | Where-Object { $_.name -eq 'description' } | Select-Object content"
scrapeImageAltText,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('img') | Select-Object alt"
scrapeCanonicalUrl,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.querySelector('link[rel=canonical]').href"
downloadAllCss,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('link') | Where-Object { $_.rel -eq 'stylesheet' } | ForEach-Object { Invoke-WebRequest -Uri $_.href -OutFile ('C:\\path\\' + $_.href.Split('/')[-1]) }"
scrapeOpenGraphTags,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('meta') | Where-Object { $_.property -like 'og:*' }"
scrapeInlineJavaScript,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('script') | Where-Object { ![string]::IsNullOrEmpty($_.innerText) } | Select-Object innerText"
scrapeFooterLinks,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.querySelectorAll('footer a') | Select-Object href"
scrapeSpecificClassElements,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByClassName('specific-class') | Select-Object outerHTML"
downloadAllScripts,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('script') | Where-Object { $_.src } | ForEach-Object { Invoke-WebRequest -Uri $_.src -OutFile ('C:\\path\\' + $_.src.Split('/')[-1]) }"
scrapeDataAttributes,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.querySelectorAll('[data-*]') | ForEach-Object { $_.outerHTML }"
extractElementById,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementById('element-id').outerHTML"
scrapeFormActionUrls,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.forms | Select-Object action"
scrapeWebPageLanguage,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.documentElement.lang"
extractStructuredData,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.querySelectorAll('[type=\"application/ld+json\"]') | ForEach-Object { $_.innerText }"
scrapeUnorderedLists,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('ul') | ForEach-Object { $_.outerHTML }"
scrapeOrderedLists,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('ol') | ForEach-Object { $_.outerHTML }"
scrapePageLoadTime,"$url = 'https://example.com'; Measure-Command { Invoke-WebRequest -Uri $url -UseBasicParsing }"
scrapeAllVideoLinks,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('video') | Select-Object src"
scrapeIframeSources,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('iframe') | Select-Object src"
scrapeButtonTexts,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('button') | Select-Object innerText"
scrapeAnchorTitles,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('a') | Select-Object title"
scrapeH2Tags,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('h2') | Select-Object innerText"
scrapeH3Tags,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('h3') | Select-Object innerText"
extractPageEncoding,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.characterSet"
scrapeRobotsTxt,"$url = 'https://example.com/robots.txt'; Invoke-WebRequest -Uri $url -UseBasicParsing | Select-Object Content"
scrapeSitemapXml,"$url = 'https://example.com/sitemap.xml'; Invoke-WebRequest -Uri $url -UseBasicParsing | Select-Object Content"
scrapeJsonLd,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.querySelectorAll('script[type=\"application/ld+json\"]') | ForEach-Object { $_.innerText }"
scrapeSpanElements,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('span') | Select-Object innerText"
extractPageCharset,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.characterSet"
scrapeWebPageSource,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).RawContent"
scrapeBlockquotes,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('blockquote') | Select-Object innerText"
scrapeNavLinks,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.querySelectorAll('nav a') | Select-Object href"
scrapeWebPageCommentTags,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.comments"
extractInnerHtml,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.body.innerHTML"
scrapeEmailAddresses,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).Content -match '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b' | Select-String -Pattern '[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}' -AllMatches | Select-Object -ExpandProperty Matches | ForEach-Object { $_.Value }"
scrapeKeywordsMetaTag,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('meta') | Where-Object { $_.name -eq 'keywords' } | Select-Object content"
scrapeBoldText,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.getElementsByTagName('b') | Select-Object innerText"
scrapeWebPageViewports,"$url = 'https://example.com'; (Invoke-WebRequest -Uri $url -UseBasicParsing).ParsedHtml.querySelector('meta[name=\"viewport\"]').content"
